Reflection and introspection
-----------------------
The Notebook for this lesson is named OOP Reflection Introspection.
In many objective languages, there are two special kinds of operations - introspection and reflection.
Introspection is the ability of a program to check the type of an object or the properties of an object
at runtime.
In other words, introspection allows you to get some information about a given object during the program Execution 

reflection is similar, but goes one step further.
It allows you to change the properties and methods of a given object during the program's execution.
Python allows you to do both introspection and reflection, and you actually already know most of the
tools that you need.

Suppose that you write a Python module that you believe will be useful for other programmers.
You want to create a function that accepts an object of any type of class, goes through all the properties
of the object, and for each string property it changes the property to an empty string.

We'll call this function empty_string because we want it to change all the strings into empty ones.
Normally such a function is impossible.
You don't know what kind of clusters your users will have.
You don't know what kind of properties these classes will have as well.
So how can you write such a function?

The answer is introspection and reflection.
Introspection will help you to get to know all the properties that are available for a given object
of any type of class.
Reflection, in turn, will allow you to change all these properties that you need.
Let's see how this can be achieved in practice.

So we'll create a method named empty_strings and it will have a single parameter user_object.
So this will be the object that we will want to introspect, reflect and change the strings into empty ones.

Now what we need to do, we are going to write a for loop in user object and here we will use the dict
property that you already know.
And because this is a dictionary, we are going to use the key method on it.
Now inside the loop we're going to do the following:
 - Prop_value will be a new variable that will equal getattr() with user object and prop_name 
as arguments and then if isinstance - this is also a new element here.

def empty_strings(user_object):
  for prop_name in user_object.__dict__.keys():
      prop_value = getattr(user_object, prop_name)
      if isinstance(prop_value, str):
         setattr(user_object, prop_name, '')

We get an object as a parameter, but we know next to nothing about it.
We don't know which class was used to create it.
However, we know that the built-in dict property is a dictionary that contains all the properties of
the object, no matter what kind of object it is.

Because it is a dictionary, we can actually use the case method.
This is a standard dictionary method to create a for loop.
This for loop will inspect all the properties of the given object one by one.
So, for each prop_name we use another function worth knowing - getattr().
It takes two arguments, an object and a name of its property and it returns the value of the given property.
Next thus isinstance(). Isinstance() takes two arguments.
 - The first one is a variable, the second one is a type 
isinstance() checks if the variable is of the given type, we put str here because 
we want to check for strings, but you could also put something like int for integers 
or maybe you could put a custom class name as well.

You can see that if the value of the given property is indeed a string,
We used the third new function setattr() - this function sets a new value for a given property.

In a given object, it takes three arguments the object, the name of the property and the new value.
Here we just set the new value to an empty string and that's it.

Let's see how this function will work with our doctor class

class Doctor():
  def __init__(self, first_name = 'John', last_name = 'Smith'):
    self.first_name = first_name
    self.last_name = last_name
    self.__format_names()

  def__ format_names(self):
    self.first_name = self.first_name.title()
    self.last_name = self.last_name.title()

  def introduce(self):
    print('hi, i am', self.fist_name)

  def compare_name(self, name_to_compare):
    if self.first_name == name_to_compare:
      print('we have the same name')
    else: 
      print('sorry the name is different')

  def get_first_last_name_together(self):
    return self.first_name + ' ' + self.last_name

And now in the new cell we are going to create an object of the doctor class.
Let's say Alexander Smith will be the object.
Now, first of all, we want this doctor to introduce himself.
You can see that there is an introduce() method defined within the class and it simply prints the first
name.

doc_alex = Doctor('alexander', 'smith')
doc_alex.introduce()
empty_strings(doc_alex)
doc_alex.introduce()

output:
Hi, i am alexander
hi, i am

And now we want to run the function empty_strings() with this object as the argument, and we want the
doctor to introduce himself again.
Alex now has an empty first name, so the function correctly identified that there is a first name and
last name property.
And because both of them are strings, they were both set to empty ones.
And this is why the introduced method now returns an empty name.

==========================
OOP inheritance
---------------
Intro Inheritance is a big aspect of object oriented programming.
In certain situations, it can also get quite complicated.
Inheritance is a mechanism where one object or class is based on another object or class.
This way we can create super classes which are broader and more general, as well as subclasses which
are detailed and concrete.
A common example would be vehicles.
You could have a general class named vehicle, and you could then create more specific classes a land
vehicle or a water vehicle.
And then again, a land vehicle could be a car or a motorcycle.
A water vehicle, for instance, could be a boat.

In this hierarchy, we start with the broadest class definition vehicle.
Each land vehicle is a vehicle. Each water vehicle is also a vehicle.
And finally, a car. A motorcycle and a boat.

In this setup, we can say that, for instance, land vehicle is a super-class of car.
Vehicle is also a super-class of car. And car is a subclass of land vehicle.
Let's focus on these three for now. Vehicle, land vehicle and car 
will start by creating these three classes and they will be empty for now.

class vehicle:
 pass
class landvehicle(vehicle):
 pass
class car(landvehicle):
 pass

These three classes are messy.
And because Python doesn't allow empty blocks of code anywhere in such situations, we need to provide
at least a single instruction for each class.
So now this instruction will be pass, which means do nothing that effectively gives us empty classes.

So what's the new element here?
Note that landvehicle has a pair of brackets after its name.
In the brackets we provide the name of the superclass, which is vehicle.
The same goes for call in the brackets.
We provide the name of the landvehicle.

This way Car has become a subclass of LandVehicle and LandVehicle has become a subclass of vehicle.
We can check that using python's is subclass() function.

issubclass(car, landvehicle)
True
issubclass(landvehicle, vehicle)
True

In our case, a car is also a subclass of vehicle, even though not directly.
Interestingly, a car is also always a subclass of itself.
issubclass(car, car)
True

==========================
inheritance properties
---------------
now that we know the hierarchy of classes, let's add content to the three classes to see how
inheritance really works.
We can create a car object like this.

class vehicle:
 pass
class landvehicle(vehicle):
 pass
class car(landvehicle):
 pass

my_car = Car()
print(my_car.__dict__)
output: {}

The classes don't have any constructors defined, they don't contain any properties.
And so you can see that we create a car with no arguments passed in the brackets.
When you check the dict property for the object created, it is empty.

Now let's add a constructor to the top hierarchy vehicle class.
So we are going to create a new cell.

class vehicle:
 def __init__(self, speed):
  self.speed = speed
class landvehicle(vehicle):
 pass
class car(landvehicle):
 pass

And now let's try to create the object again.
And now when you want to run the code, it fails.

my_car = Car()
print(my_car.__dict__)
output: err line 1 missing required positional argument 'speed'

The constructor is missing one required positional argument named speed.
How is that possible?
We don't have any constructor or any property defined in the car class.
If we don't define a constructor for car explicitly, Python will try to look for a constructor in all
of these super classes.
There's no constructor in land vehicle, but there is one in vehicle, so Python will use that constructor
for creating costs.

All of this happens because car inherits from land vehicle which in turns inherits from vehicle.
All the properties and methods defined in vehicle will therefore be visible in car.
This means that we now need to provide an argument for the speed parameter in the car subclass such
as here.

As you can see, car inherited the speed property from the vehicle superclass.
All of this happens indirectly through the landvehicle class.
Now what happens when we create a constructor in the landvehicle in turn?

class vehicle:
 def __init__(self, speed):
  self.speed = speed
class landvehicle(vehicle):
 def __init__(self, wheel_count):
    self.wheel_count = wheel_count
class car(landvehicle):
 pass

And now if we try to create an object in the very same manner 
something strange happened here, we could successfully create an object of class car, 
but the speech property from the vehicle constructor is gone.

my_car = Car(5)
print(my_car.__dict__)
output: {'wheel_count': 5}

The rule is that Python only inherits the constructor from the superclass if there is no constructor
defined in the given class.
In the previous example here, car didn't have a constructor, so it inherited a constructor from Land
Vehicle and because LandVehicle did not have a constructor either, it inherited the constructor defined
in the vehicle class.

As a result, the constructor from vehicle was used to create a car object.
And here when we defined a constructor in landvehicle, it did not inherit the one for vehicle.
That means that landvehicle has its own constructor now, which is not related to the vehicle constructor
here in any way.

And this time Car inherited this new constructor for a land vehicle which doesn't have a speech property.
inheritance allows subclasses to take properties from the super classes.
But here it looks like car only has the properties from their land vehicle, but it doesn't have the
property from their vehicle.

How to change that?
All we need to do is invoke the vehicle constructor from the landvehicle constructor directly.
I'm going to add the following vehicle in it.
And this constructor expects two parameters.
So I'm going to do a self and speed.

class vehicle:
 def __init__(self, speed):
  self.speed = speed
class landvehicle(vehicle):
 def __init__(self, wheel_count):
  Vehicle.__init__(self, speed)  
  self.wheel_count = wheel_count
class car(landvehicle):
 pass

And now, because I need to value for a speed, I'm going to add it here as one of the parameters around
the cell.
And now let's try to create a new car object with two arguments.
As you can see that it succeeded as the first instruction in the land vehicle constructor.

my_car = Car(5, 10)
print(my_car.__dict__)
output: {'speed': 5, 'wheel_count': 10}

The name of the superclass followed by adult and the init method name.
We can see in the vehicle constructor definition that it requires two arguments, self and speed.
So these are the arguments that we provide insight the land vehicle constructor.
The first one is self and the second one is speed.
For speed to work, we had to add another parameter to the Land Vehicle constructor here.

The constructor now has three parameters.
The first one is self, the second one is speed, and the third one is wheel_count and this version
will be inherited by the car.
This also means that to create a car object, we need to provide two parameters one for speed and the
other one for wheel_count.
And as usual, the self reference is provided for you automatically.

So in short, to invoke the constructor from the superclass, we can use the dot notation with the name
of the superclass, but we can also do something else.
We can use a special super keyword

super().__init__(speed) # we replaced   Vehicle.__init__(self, speed)  
it works in the very same way.

Note a subtle difference when we use the super keyword instead of the super class name, we don't need
to provide the self parameter.
It will be automatically passed for us by Python to a superclass constructor.
Both notations, the one with the class name and the one with the super keyword allow you to use constructors
from super classes.

This in turn means that we can inherit instance variables from super-classes outside the class definition.
We can simply use the dot notation to access the instance variables defined in the super-classes.
So here when we have a my_car object, we can do the following speed and you can see that it works.
So this value is actually taken from the super class named vehicle, even though we never defined a
speed instance variable in the car class, it was inherited for us from the super classes via constructors.

==========================
inheriting class variables and methods
---------------

class vehicle:
 class_message = 'this is a message from the vehicle class!'
 def __init__(self, speed):
  self.speed = speed
class landvehicle(vehicle):
 def __init__(self, wheel_count):
   super().__init__(speed)
   self.wheel_count = wheel_count
  print(vehicle.class_message) # this can be replaced with print(super().class_message)
class car(landvehicle):
 pass

We already know how instance variables can be inherited using constructors, but how about class variables?
It turns out that they work exactly the same way, and it turns out that you can use the same syntax
to get them.
In this upper class vehicle, we are going to write a class message and let's say it's going to be something
like this is a message from the vehicle class.
And now we want to print that class message at the end of the constructor in the subclass names LandVehicle.
So we are going to do the following print vehicle Class Message.

In order to verify whether that works, we're going to create a new my_car.
And let's see what this cell does when we run it.

my_car = Car(50, 4)
output: this is a message from the vehicle class!

It actually creates the object based on the constructor from the land vehicle class.
And it also prints the message from the superclass named vehicle.
So here we defined a class variable in the vehicle class and we could then easily access this variable
in the subclass using the dot notation with the superclass name.

Outside the class definition, we can easily access the class variable from vehicle using the dot notation
too so we can do something like this:
my_car.class_message

The class variable was inherited from the super-class and we can access class message from a car object
as you can see.
Now, how about methods from super-classes?
Exactly the same story.

class vehicle:
 class_message = 'this is a message from the vehicle class!'
 def __init__(self, speed):
  self.speed = speed
class landvehicle(vehicle):
 def __init__(self, wheel_count):
   super().__init__(speed)
   self.wheel_count = wheel_count
   print(vehicle.class_message) # this can be replaced with print(super().class_message)
 def speed_up(self): # added method
   self_speed += 5
class car(landvehicle):
 pass

And now in the call class, we're going to do define super_speed and it's going to print super speed,
activate it first, and then it's going to do super speed_up.
And we're actually going to repeat that three times around the cell.

class car(landvehicle):
 def super_speed(self):
  print('super speed activated')
   super().speed_up()
   super().speed_up()
   super().speed_up()

And now let's create a new object.

my_fast_car = Car(10, 4)
print(my_fast_car.__dict__)
my_fast_car = super_speed()
print(my_fast_car.__dict__)
output: this is a message from the vehicle class!
{'speed': 10, 'wheel_count': 4}
super speed activated
{'speed': 25, 'wheel_count': 4}

And you can see the speed has changed.
Look how we added a speed up method in the land vehicle superclass.
Then in the car subclass we created a super-speed method where we invoke this method three times in
a row.
Again, we can use the super keyword or we can use the class name.
If we don't want to speed up so aggressively with our mycar object, we can of course also use the speed
up method directly.
This method is automatically inherited from the parent class, so you can do something like my fast
car, speed_up just like this, and then let's print the content of dict after that and you can see
again it worked.

my_fast_car = Car(10, 4)
print(my_fast_car.__dict__)
my_fast_car = super_speed()
print(my_fast_car.__dict__)

my_fast_car = super_speed()
print(my_fast_car.__dict__)
{'speed': 30, 'wheel_count': 4}

As you can see with multiple levels of inheritance, it can sometimes get quite complicated to see what
is inherited, where and how to invoke it.

==========================
overriding properties and methods
---------------
We've talked about inheritance and how you can use properties and methods from super-classes in subclasses.
But imagine the following situation.
We've got a class named Animal that will have a simple constructor with species property set to string
and another method named produce_sound that will print message and that will also have
a class named dog that will inherit from animal and it will be empty.

class Animal():
  def __init__(self):
    self.species = 'general'
  def produce_sound(self):
    print('General animal sound')
class Dog(Animal)
  pass

my_pet = Dog()
print(my_pet.species)
my_pet.produce_sound()
output: general
General animal sound

So at first we've got a general animal class and a more specific dog class.
The dog class is empty, but it inherits from the animal class.
So when we access the species property here on line two, we get the value from the superclass.
The same goes for the produce sound method.
Dog uses the method from its superclass again.
We've seen that before, but now take a look at the following situation.

class Animal():
  def __init__(self):
    self.species = 'general'
  def produce_sound(self):
    print('General animal sound')
class Dog(Animal)
  def __init__(self):
    self.species = 'canis familiaris'
  def produce_sound(self):
    print('woof, woof')

my_pet = Dog()
print(my_pet.species)
my_pet.produce_sound()
output: canis familiaris
woof, woof

So we've added some code to the class.
Its constructor defines a property named species, exactly the same property as in the superclass.
We also define a method named produce sound, which has the exact same name as the method in the superclass.
When we now run the code, you can see that we get a different result.
Python shows the property from the dog class and uses the method from the dog class, not from its superclass.
This phenomenon is called method overriding.

When we define a method with the exact same name in the superclass and the subclass, the method from
the superclass overrides in other words, hides the method from the superclass in general.
Remember that when you try to access a property or a method in an object, Python will first try to
find that entity inside the object itself.
If it fails, it then tries to find it in all the classes involved in the object inheritance line from
bottom to top with the most general class at the very end 
method, overriding helps achieve one of the four core concepts of object oriented programming.

The four concepts are encapsulation, abstraction, polymorphism and inheritance.
You already know what encapsulation, abstraction and inheritance are.
Let's talk about polymorphism then.

In the most general sense, polymorphism means the ability of classes to take different forms.
Usually when we talk about polymorphism, we talk about method overriding.

So here we're going to use the very same classes and in a new cell we're going to create.

my_first_pet = Animal()
my_second_pet = Dog()
my_first_pet.produce_sound()
my_second_pet.produce_sound()
Output: General animal sound
woof, woof

An object of the general class Animal produces a general animal sound while an object of class dog produces Woof Woof.
Even though both objects are animals, one of them is more specific and changes the behavior of the
superclass, and that's an example of polymorphism.
One method name produced sound behaves differentially based on the specific object that calls it.
Another interesting aspect of method Overwriting and polymorphism is when methods use other methods.

class Animal():
  def __init__(self):
    self.species = 'general'
  def produce_sound(self):
    print('General animal sound')
  def present(self):
    print('i can do the following sound:')
    self.produce_sound()
class Dog(Animal)
  def __init__(self):
    self.species = 'canis familiaris'
  def produce_sound(self):
    print('woof, woof')

my_first_pet = Animal()
my_second_pet = Dog()
my_first_pet.present()
print()
my_second_pet.present()
output: 
i can do the following sound:
General animal sound
i can do the following sound:
woof, woof

So here we have a new method created in the animal class.
This method prints a statement and then calls another method produce_sound, which prints another statement.
In the case of the first pet, which is an instance of the general animal class, the behavior is quite
obvious.

The dog class inherits the present method from the animal superclass, but when it's time to call the
produce sound method, the dog object actually uses its own version of the method.
That's because we use the produce sound invocation with the self reference, which always points to
the current object.
As a result, Python always tries to find the matching method within the object itself, and the end
result is that even though both objects use the present method, they actually behave differentially
because behind the scenes they were created using different classes.

==========================
isinstance + is
---------------
All of these subclasses and invoking constructors from super classes that we already discussed may be
a bit confusing.

class vehicle:
 def __init__(self, speed):
  self.speed = speed
class landvehicle(vehicle):
 def __init__(self, wheel_count):
   super().__init__(speed) 
   self.wheel_count = wheel_count
class car(landvehicle):
 pass

my_vehicle() = vehicle(50)
my_land_vehicle - landvehicle(50, 4)
my_car = Car(60, 4)

print(isinstance(my_vehicle, vehicle))
print(isinstance(my_land_vehicle, vehicle))
print(isinstance(My_car, vehicle))

True
True
True

print(isinstance(my_vehicle, landvehicle))
print(isinstance(my_land_vehicle, landvehicle))
print(isinstance(My_car, landvehicle))

False
True
True

my vehicle that was created from the vehicle class is an instance of the vehicle class,
but it's not an instance of land vehicle or the car class.

print(isinstance(my_vehicle, car))
print(isinstance(my_land_vehicle, car))
print(isinstance(My_car, car))

False
False
True

In turn, my_car is an instance of car.
As you can see here, but it's also an instance of land vehicle and an instance of car.
All of this at the same time.

There's also an operator that you can use with to object variables is()
the operator checks whether two variables point to the same object?
How does that work?
Remember that variables don't store objects directly.
Variables actually store references to objects in the memory.

In other words, object variables contain the address of an object in the memory, not the object itself.
And this has some consequences.
We're on the cell and the first line creates a new object.
We can be sure of that because we can see the name of the class followed by a pair of brackets.
This syntax is used to create a new object in the memory, the address of this object.
In other words, the reference to that object will be saved in the my vehicle variable.

my_vehicle = vehicle(60)
my_new_vehicle = my_vehicle

Now on line two, we assign the value of my vehicle to a new variable, my new vehicle because my vehicle
only stores the reference to the actual object.
My new vehicle gets that reference and both variables point to the same object.
You can easily check that using the IS operator.
So here we are going to do the following around the cell and print:

print(my_vehicle is my_new_vehicle)
True

You can see true to the output, this approach has some consequences if you make any changes to the
object using one of the variables, that change will be visible in the second variable as well.
So for instance. First we are going to print the date property for both my vehicle and my new vehicle.
And now we want to change my vehicle speed to 30 and we want to print the dictionaries after this operation.

print(my_vehicle.__dict__, my_new_vehicle.__dict__)
my_vehicle.speed = 30
print(my_vehicle.__dict__, my_new_vehicle.__dict__)

{'speed': 60} {'speed': 60}
{'speed': 30} {'speed': 30}

And as you can see, the change applied with the my_vehicle object reference is also visible and the
my_new_vehicle object reference because they both reference the very same object in their memory.
If you want to have two different objects, you need to use the notation with class name plus brackets
twice, so you would have to do the following.

my_vehicle = vehicle(60)
my_new_vehicle = vehicle(60)

And now these variables will keep completely different references to completely different objects in
their memory.
So if you run this cell and you try this test again.
You will now see that the change to the speed in my vehicle here to 30 is completely independent of
the speech in the my new vehicle object reference.

print(my_vehicle.__dict__, my_new_vehicle.__dict__)
my_vehicle.speed = 30
print(my_vehicle.__dict__, my_new_vehicle.__dict__)

{'speed': 60} {'speed': 60}
{'speed': 30} {'speed': 60}

All right let's analyze how is() works outside object oriented programming with primitive data types will
start with integers.
So first of all, we'll create Three variables first num 5 seconds num five.

first_num = 5
second_num = 5
print(first_num is second_num)
o: True

As you can see, if two variables with primitives such as integers contain the very same integer number,
the result of using the IS operator is true.
And now what will happen in the following situation?

first_num = 5
second_num = 2
second_num += 3
print(first_num is second_num)

o: True

And again we want to check whether they both are the same.
So initially, second numb has a different number than first numb.
But on line three we actually use addition so that both numbers are the same.
The is operator still returns true as you can see.
The same however is not true about strings.

first_str = 'hello'
second_str = 'hello'
print(first_str is second_str)

So take a look first_str will be hello second_str will be hello too.
And now if we check whether first_Str is second_Str, you can see true.
And the reason for that is because Python has some internal optimization mechanisms for strings when
it sees that we define two string variables with the same content.
The second variable actually points to the very same string as the first one.
The result is true.

However, you need to remember that strings are immutable.
If you try to change an existing string, python will instead create a new one.
And that's a very tricky part.
Take a look at this example.

first_str = 'hello'
second_str = 'hell'
second_str += 'o'
print(first_str is second_str)
o: False

So at first sight, this example looks similar to the one with integers right here.
We just added three to the number of two.
Both of the variables contain the number five.
So the result of asking first time is second time was true here.
However, something different happens.
The second string is initially different from the first one, but on line three we add the missing 'O'
at the end of the string.

The strings now seem identical, but the IS operator returns false.
That's because whenever we try to modify an existing string, python instead creates a new one, even
though both STR and second still contain identical strings.
Now they are actually two separate objects in the memory.
Keep that in mind.

That's where the equality operator gives a different result.
So if you try the following invocation now instead of s, we are going to use double equality sign.
You can say true to the output, the equality operator returns true because both variables contain the
very same string value, but because the actual string objects behind them are two different objects
in the memory that is operator returns false.

first_str = 'hello'
second_str = 'hell'
second_str += 'o'
print(first_str == second_str)
o: True

==========================
multiple inheritance
---------------
In a nutshell, it's a situation when a class has more than one super class.
In other words, it's a situation in which a class inherits from more than one class.
Syntax wise, using multiple inheritance is quite simple.
All you have to do is provide all the subclasses separated by commas.
The difficulty about multiple inheritance is elsewhere.

It is very easy to lose track of what properties or methods are inherited.

So let's start with a very easy example.

Class vehicle, one that you already know.

It will be empty for now.

Now, another class named Flyable, which will also be empty and flyable, could be something like flying

vehicles, such as, I don't know, an airplane, a helicopter, but also something like a bird or a

bee.

An animal that flies is also a flyable right.

And that after these two classes, we are going to have a third class named airplane that will inherit

from both vehicle and flyable,

and it will also be empty.

Now, when you run the cell and create a new one with an object of class airplane, you can see that

everything works fine.

So here we've got two super classes, vehicle and flyable.

Then we define a third class airplane which inherits from both vehicle and flyable.

This makes sense.

A plane is a vehicle that is able to fly.

The classes are empty.

So for now, nothing exciting is happening.

So let's add some code here.

In the vehicle class, we are going to create a method named go and it will print going to the output.

And here in the flyable class we are going to define a method named fly that will print surprise, surprise.

Flying right around the cell.

And now here in the second cell, try to invoke the following.

Go and fly and everything works fine.

So we've added a simple method to the vehicle class.

Go.

We've also added a simple method to the flyable class fly.

Then we try to invoke both methods from an object of the class airplane.

As you can see, everything worked fine.

Airplane inherited the methods from both classes, and that's the basis of multiple inheritance.

Looks nice and easy, but how about this situation?

We are going to copy paste this into a third cell and I'm going to add the following.

Def introduce with self as a reference and here print i am vehicle.

And at the second class death introduce reference to self and here print I am flyable.

All right, so around the cell, everything works fine.

We've added a new method to the vehicle class introduce.

Interestingly, we've added a method with the very same name to the flyable class as well.

It's also called introduce.

Theoretically speaking, airplane should now inherit all the methods from all the super classes.

But these two new methods have exactly the same name.

So what will happen if we now invoke the following code?

So here we want to do introduce and let's see what happens.

I am a vehicle.

You can see that airplane printers.

I am a vehicle and not I am a flyable.

Why is that?

Why was the vehicle method version chosen over the flyable method version?

The answer is something called MRO or method resolution order.

MRO explains how a given programming language tries to find the method that is currently needed.

Each programming language has a slightly different Maro in Python.

The following rule applies.

Python looks for a method with a specified name in the following order.

First, it tries to find the method inside the object itself.

If there is no such method, Python goes to 0.2, which is to find the methods in its super classes

and if there is no method with the given name in the superclass, Python raises an error.

However, if does exactly one method with the given name somewhere in the subclasses, Python will use

exactly that method.

But if there's more than one method with the given name in the super classes, as is the case here,

then Python scans the subclasses from left to right.

You can see that vehicle was defined as the first superclass of airplane, which is why vehicles version

of introduced was preferred.

Now let's do a small experiment and change the order of super classes for airplane.

So we are going to copy, paste this code into a new cell and simply change the order here flyable out

vehicle run the cell.

And if we now create a new airplane object, you can see IMF flyable instead of IMF vehicle.

That's because flyable is now the first superclass defines in front of the vehicle.

In the example above, we had the introduce method declared in both super classes and we had to determine

which version to use.

But what will happen if we now also add a third variant of introduce this time in the airplane class

itself?

Let's find it out.

I'm going to copy paste the code again into a new cell.

And here, instead of pass, we are going to do death introduce reference to self print.

I am an airplane.

All right, we're on the cell.

And again, copy paste this object creation.

And now you can see I am an airplane, not I am flyable.

So this time you can see that the airplane object did not use the introduced method from vehicle or

flyable.

Instead it used its own version.

Again, methods resolution older explains what happened here.

First and foremost, Python tries to find the method inside the object itself because Python could successfully

find the method in the airplane class.

It didn't need to go to the super classes at all.

As you can see, multiple inheritance is easy in terms of the code.

You just need to put more class names in the brackets after the name of your class.

But the difficult part is what happens to those subclasses that have multiple subclasses and what is

inherited from war.

Now imagine that you have a class that has five or ten super classes with similar method names.

It could get crazy.

I'm telling you, the general rule is to avoid using multiple inheritance at all.

In fact, many programming languages do not allow multiple inheritance at all.

Single inheritance is always simpler and easier to maintain with multiple inheritance.

You have many options to mess up and to make a mistake.

Treat multiple inheritance as the last resort when you don't have any other option left.

As a rule of thumb, you should prefer a single inheritance or perhaps even no inheritance at all.
