Reflection and introspection
-----------------------
The Notebook for this lesson is named OOP Reflection Introspection.
In many objective languages, there are two special kinds of operations - introspection and reflection.
Introspection is the ability of a program to check the type of an object or the properties of an object
at runtime.
In other words, introspection allows you to get some information about a given object during the program Execution 

reflection is similar, but goes one step further.
It allows you to change the properties and methods of a given object during the program's execution.
Python allows you to do both introspection and reflection, and you actually already know most of the
tools that you need.

Suppose that you write a Python module that you believe will be useful for other programmers.
You want to create a function that accepts an object of any type of class, goes through all the properties
of the object, and for each string property it changes the property to an empty string.

We'll call this function empty_string because we want it to change all the strings into empty ones.
Normally such a function is impossible.
You don't know what kind of clusters your users will have.
You don't know what kind of properties these classes will have as well.
So how can you write such a function?

The answer is introspection and reflection.
Introspection will help you to get to know all the properties that are available for a given object
of any type of class.
Reflection, in turn, will allow you to change all these properties that you need.
Let's see how this can be achieved in practice.

So we'll create a method named empty_strings and it will have a single parameter user_object.
So this will be the object that we will want to introspect, reflect and change the strings into empty ones.

Now what we need to do, we are going to write a for loop in user object and here we will use the dict
property that you already know.
And because this is a dictionary, we are going to use the key method on it.
Now inside the loop we're going to do the following:
 - Prop_value will be a new variable that will equal getattr() with user object and prop_name 
as arguments and then if isinstance - this is also a new element here.

def empty_strings(user_object):
  for prop_name in user_object.__dict__.keys():
      prop_value = getattr(user_object, prop_name)
      if isinstance(prop_value, str):
         setattr(user_object, prop_name, '')

We get an object as a parameter, but we know next to nothing about it.
We don't know which class was used to create it.
However, we know that the built-in dict property is a dictionary that contains all the properties of
the object, no matter what kind of object it is.

Because it is a dictionary, we can actually use the case method.
This is a standard dictionary method to create a for loop.
This for loop will inspect all the properties of the given object one by one.
So, for each prop_name we use another function worth knowing - getattr().
It takes two arguments, an object and a name of its property and it returns the value of the given property.
Next thus isinstance(). Isinstance() takes two arguments.
 - The first one is a variable, the second one is a type 
isinstance() checks if the variable is of the given type, we put str here because 
we want to check for strings, but you could also put something like int for integers 
or maybe you could put a custom class name as well.

You can see that if the value of the given property is indeed a string,
We used the third new function setattr() - this function sets a new value for a given property.

In a given object, it takes three arguments the object, the name of the property and the new value.
Here we just set the new value to an empty string and that's it.

Let's see how this function will work with our doctor class

class Doctor():
  def __init__(self, first_name = 'John', last_name = 'Smith')
    self.first_name = first_name
    self.last_name = last_name
    self.__format_names()

  def__ format_names(self):
    self.first_name = self.first_name.title()
    self.last_name = self.last_name.title()

  def introduce(self):
    print('hi, i am', self.fist_name)

  def compare_name(self, name_to_compare):
    if self.first_name == name_to_compare:
      print('we have the same name')
    else: 
      print('sorry the name is different')

  def get_first_last_name_together(self):
    return self.first_name + ' ' + self.last_name

And now in the new cell we are going to create an object of the doctor class.
Let's say Alexander Smith will be the object.
Now, first of all, we want this doctor to introduce himself.
You can see that there is an introduce() method defined within the class and it simply prints the first
name.

doc_alex = Doctor('alexander', 'smith')
doc_alex.introduce()
empty_strings(doc_alex)
doc_alex.introduce()

output:
Hi, i am alexander
hi, i am

And now we want to run the function empty_strings() with this object as the argument, and we want the
doctor to introduce himself again.
Alex now has an empty first name, so the function correctly identified that there is a first name and
last name property.
And because both of them are strings, they were both set to empty ones.
And this is why the introduced method now returns an empty name.

==========================
OOP inheritance
---------------
Intro Inheritance is a big aspect of object oriented programming.
In certain situations, it can also get quite complicated.
Inheritance is a mechanism where one object or class is based on another object or class.
This way we can create super classes which are broader and more general, as well as subclasses which
are detailed and concrete.
A common example would be vehicles.
You could have a general class named vehicle, and you could then create more specific classes a land
vehicle or a water vehicle.
And then again, a land vehicle could be a car or a motorcycle.
A water vehicle, for instance, could be a boat.

In this hierarchy, we start with the broadest class definition vehicle.
Each land vehicle is a vehicle. Each water vehicle is also a vehicle.
And finally, a car. A motorcycle and a boat.

In this setup, we can say that, for instance, land vehicle is a super-class of car.
Vehicle is also a super-class of car. And car is a subclass of land vehicle.
Let's focus on these three for now. Vehicle, land vehicle and car 
will start by creating these three classes and they will be empty for now.

So we'll do the following class vehicle pass now.

Class land vehicle.

But you go inside the brackets pass.

And the third one, class car.

Land.

Vehicle pass.

Right.

These three classes are messy.

And because Python doesn't allow empty blocks of code anywhere in such situations, we need to provide

at least a single instruction for each class.

So now this instruction will be pass, which means do nothing that effectively gives us empty classes.

So what's the new element here?

Note that land vehicle has a pair of brackets after its name.

In the brackets we provide the name of the superclass, which is vehicle.

The same goes for call in the brackets.

We provide the name of the land vehicle.

This way Car has become a subclass of Land Vehicle and Land Vehicle has become a subclass of vehicle.

We can check that using python's is subclass function.

Take a look.

So is car a subclass of land vehicle?

True.

And a similar invocation.

Is Land Vehicle a surplus of vehicle?

Also true, the class that we test does not need to be an immediate subclass of the other class.

In our case, a car is also a subclass of vehicle, even though not directly.

So if you do is subclass car of simply vehicle, you will also see true.

Interestingly, a car is also always a subclass of itself.

So if you try its car subclass of car you will also see.

True.

Okay, that was a very quick introduction into inheritance.

In the next video we'll actually write some code inside the classes and see how it works.
