list comprehensions
-------------------
numbers = []
for i in range(1, 101):
  numbers.append(i)
print('Numbers', numbers)
output: Numbers: [1, 2, ... 100]

numbers = [i for i in range(1, 101)] 
print('Numbers', numbers)
output: Numbers: [1, 2, ... 100]

numbers = [i for i in range(1, 101) if i % 3 != 0] 
print('Numbers', numbers)
output: Numbers: [1, 2, 4, 5..., 98, 100]

numbers = [0 if i % 2 == 0 else 1 for i in range(100)] 
print('Numbers', numbers)
output: Numbers: [0, 1, 0, 1, ... 0, 1]

table = [i for i in range(1, 6)]
print(table)
output: [1,2,3,4,5]

table = [[i for i in range(1, 6)] for j in range(5)]
print(table)
output: [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]

============
lambda functions
---------------
Lambda functions and Python are used to simplify code to make it easier to understand shorter and clearer.
A typical function in python is defined like this.

def function_name(parameter1, parameter2):
# instruction1
# instruction2

A lambda function in Python in turn looks something like this.

lambda parameter1, parameter2: # instruction

The two major differences that stick out almost immediately are that a function always has a name.
A lambda in turn can be used without giving it any name.
The second difference is that a lambda can only contain a single instruction.
Let's write the very same function in two ways using the classic approach with the keyword def and using
a lambda.

This will be a very simple function that accepts just two numbers and adds them together.
pens in the output.

def sum(a, b):
  return a + b

lambda a, b: a + b
output: <function__main__.<lambda>(a, b)>

First of all, the Lambda version is much shorter.
Second of all, the Lambda version does not need to return keyword and of course the variables can be
named differentially.

Now, the problem with the code we have right now is that the sum function can be easily called.
We just need to write something like for instance, some five and three and that's it.

sum(3, 5)
o: 8

But how do we call the lambda if it doesn't have a name?
we can save the lambda function into a variable and to use the variable name to call the lambda.

another_sum = lambda a, b: a + b

And now you can see that both of these functions, the classic one and the Lambda one, are invoked
in the exact same way.

You may be wondering if Lambda functions can be used in the same way as normal functions.
Why do they exist?
There are a few situations where lambdas come in handy.
One of the superpowers is that they can be passed around just like variables.

def apply_func(elements, func):
  for element in elements:
    print(func(element))

Suppose that we have a list of numbers from 1 to 5 and we want to print their values to the second power.
We can do it in the following way:
And now as the second parameter we are going to add my func Look what happens here.
The first argument contains the elements to iterate inside.
Apply func numbers from 1 to 5.

my_func = lambda x: x * x
apply_func([1, 2, 3, 4, 5], my_func)
output: 1 4 9 16 25

Now for each of the elements, we want to apply the function pass as the second parameter.
The function is a lambda that we saved in the my func variable.
It takes one argument and returns the argument squared.
Now in the output we can actually see that for each element, the apply func function used the lambda
to calculate the second power and then it's printed the result.
The beautiful thing about the apply_func function is that it can work with so many different lambda
types. 

For instance, if you want to do something else with each number, let's say you want to find the reverse
number for each of them.
You just need to change the lambda.

my_func = lambda x: 1 / x
apply_func([1, 2, 3, 4, 5], my_func)
output: 1 0.5 0.33 0.25 0.2

The lambda is defined directly in the function invocation here.
You do need to create a special variable for it.
Note that the lambda is not saved anywhere in this setup.

apply_func([1, 2, 3, 4, 5]), lambda x: x * x)
out: 1 4 9 16 25

Once this line is executed, the lambda is lost and you can't reuse it later in the code.
But this is exactly what we needed.
A simple way to define a function in line with the function invocation itself.
They allow you to write shorter, clearer code without defining unnecessary variables.
Lambda functions are sometimes called functions without names or anonymous functions.
When you take a look at the last example, you can easily understand why, as the lambda here does not
have any name and is quite anonymous.

========================
map and filter with lambda functions
------------------------------
two functions that accept lambdas.
First, let's talk about map.
Map typically takes to arguments.
The first one is a function.
The second one is a sequence with some elements.
Then map applies the function to all the elements in the sequence.

We wrote a very similar function in the introductory video about lambdas, but map is a bit more universal.
Instead of printing to the output the result of each invocation, it creates a structure called an iterator.
an iterator is an object that allows you to retrieve the elements one by one in a loop or convert them into a list.

Let's see that in practice, we'll create a lambda function that will multiply a given number by two
and we'll also have an initial list.

lambda_func = lambda i: i  * 2
initial_list = [1, 2, 3, 4, 5]

map(lambda_func, initial_list)
<map at 0x324235345>

The first argument is the lambda.
The second argument is the sequence with elements like this.
Now, if we run the code, you can see that we don't get to see anything meaningful.

As I said, map returns an iterator, a special kind of object.
When you print the iterator, you can simply see its identify in the memory, like with many other types
of objects.

Let's save the resulting iterator into a variable and use the next function to get a single value from
the iterator.

map_result = map(lambda_func, initial_list)
print(map_result)
o: 2

And let's use the print invocation around it and let's see what we get.
You can see the value to returned.
This is the first element in the iterator.
After applying the lambda function, you can use subsequent next goals to get subsequent results.
We are going to repeat that for the second, third, fourth, fifth and sixth time.

map_result = map(lambda_func, initial_list)
print(map_result)
print(map_result)
print(map_result)
print(map_result)
print(map_result)
print(map_result)

o: 2 4 6 8 10 
stopiteration err

And you can see all the values printed to the output and at the very end and exception raised stop iteration.
This means that there are no more values to return.
But as you can see, this way of working with iterator is not really convenient.
Instead, we could use a for loop, so we are going to do the following in the new cell.

I'm going to do four element in map result.

Print the element and finish it with a comma like this.

map_result = map(lambda_func, initial_list)
for element in map_result:
  print(element, end=',')
o: 2, 4, 6, 8, 10, 

Another way is to use the list function to simply get all the output from the iterator into a nice little
list.

map_result = map(lambda_func, initial_list)
print(list(map_result))
o: [2, 4, 6, 8, 10]

So if we gather all the codes together, that's create the lambda and the list and we add this.

lambda_func = lambda i: i  * 2
initial_list = [1, 2, 3, 4, 5]
map_result = map(lambda_func, initial_list)
print(list(map_result))
o: [2, 4, 6, 8, 10]

Believe it or not, we can reduce all of this code into a single line like this.

print(list(map(lambda i: i * 2, [1, 2, 3, 4, 5])))
o: [2, 4, 6, 8, 10]

So we have the printing location, the list function, the map function, the lambda defined inside
and the list provided directly.
And now if we run this code, it works the exact same way.
See how we convert it? All of the four lines into a single line of code.

That's one of the secrets powers behind Python.
You can really reduce your code to the bare minimum.
Now let's talk about filter.

Filter works in a similar way to map.
It also accepts a function and a sequence.
It's also returns an iterator.
The difference between map and filter is that filter uses the function to well, as the name suggests,
to filter the elements of the sequence.


Take a look at this example.
The lambda will be a bit different so we want to check I divisible by two must be equal to zero and
let's maybe have more elements here to see the result.
And so let's break it to the output.
So we have a list of numbers from 1 to 8.
We would like to have a new list that only contains even numbers to do that we make use of the filter
function here.

The lambda in this case contains the condition that each matching elements should satisfy.
When we divide the elements by 2, we should receive zero.
In other words, this means check if the element is an even number.
If it is, the filter function keeps the element.
If it isn't, the filter function removes the element from the result.
And just as the function name suggests, we successfully filtered out all all two numbers and only got
even numbers in the resulting list.

print(list(filter(lambda i: i % 2 == 0, [1, 2, 3, 4, 5, 6, 7, 8])))
o: [2, 4, 6, 8]

We will provide a list of email addresses and we will filter out those that are fake.
That is, they don't contain the ad sign.
I have a list of some email addresses like here.
There is a column here that we don't need.

emails = [
'frank@gmail.com',
'i love python',
'e74583',
'journal@yahoo.com',
'fsiaddr'
]
list(filter(lambda x: '@' in x, emails))
o: ['journal@yahoo.com', 'frank@gmail.com']

You can see that we got a list of email addresses and some of them were not real addresses.
We use the filter function to get rid of these values in the list that did not contain the app sign.
As you can see, thanks to Lambda, we only needed a single line to get a new list with correct email
addresses.

========================
closures
------------------------------
If you take a look at the formal definition of a closure, you will find something like this.
A closure is a technique for implementing lexical scoped name binding in the language with first class
functions.
A more digestible definition would be something like this a closure as a function defined inside another
function that remembers the values of the outer function.

def greet(text):
  def print_greet():
    print(text)
  return print_greet
say_hello = greet('hello')
say_hellow()
o: hello

We define a function named grid.
This function takes a single argument, a text value.
Next, inside the greet function, we define another function print_greet
Print_greet is called a nested function.
As you can see, you can test functions in Python the same way that you can nest for loops or if statements.
This nested function doesn't take any arguments inside.
It prints the text variable to the output.

As you can see, the nested function has access to the variables available in the outer function.
So even though print_greet doesn't get text as an argument, it can access the variable because the variable
is available in the outer function.
That nested function print_greet becomes a closure the moment it references a variable from the outer
function.
If we didn't reference any variables from the greet function, print_greet would simply be called a nested
function.
But when we access that text variable inside print_greet, it immediately becomes a closure.

And now the second interesting thing happens we return the closure from the outer function.
Note that we don't add brackets to the closure name.
That's because we don't want to invoke the function.
We simply want to return it.
In Python, whenever you add a pair of round brackets, be it with or without arguments inside, you
instruction python to call the function.

Without the brackets here we simply return the nested function without calling it.
because we return a value from the outer function.
That value can be saved into a variable.
That's what we do on the next line.
We call the greet function with a single argument.
And we store the result in the say hello variable.

Note that at this point nothing has been printed yet.
The print invocation is contained inside the print_greet closure.
But the closure was never called, so there's nothing printed to the output yet.
Now look what happens on the last line.
We add a pair of round brackets to the variable name.

This means try to invoke whatever is contained inside the say_hello variable and because say_hello contains
a closure, that closure is invoked.
The closure contains a print statement so we can see something printed to the output.

The closure remembers the value of text.
The closure knows that it should print hello to the output, even though we don't pass anything when
we call the closure on the last line.
That's a very important feature of closures.

They can store values from the outer functions, even though these functions have finished executing
and the values should be, theoretically speaking, already destroyed.
Such variables, variables that should be already destroyed but are still available in a closure are
called free variables.

Closures are not very intuitive at first sight.
So let's analyze another example.

We create a function named make_multiply_closure.

def make_multiply_closure(x):
  def multiply(y):
    return x * y

  return multiply

multiply_5 = make_multiply_closure(5)
multiply_12 = make_multiply_closure(12)

print(multiply_5(10))
print(multiply_5(20))

print(multiply_12(10))
print(multiply_12(20))

o: 50 100 120 240

It accepts a single argument named X.
Then inside the function we create a closure named multiply that accepts an argument of its own - y 
the closure is returned from the function.
Now we create two variables multiply5 and multiply12.
The first one invokes the outer function with an argument five.
The second one invokes the outer function with an argument of 12.

These variables now contain the same closure with two different values for X five and 12.
Later in the code, we can call each closure version and provide an argument which will be used as the
second number, the Y parameter in the inner function.

the closure remembers the first number and multiplies it by the second number provided.
as you can see, closures can be a bit difficult to understand.
It's easy to lose track of what argument is stored where 

The outer function requires a single argument passed.
So when creating the closure here and here, we provided a single argument twice.
Then when invoking the closure, you could see that we provided a single argument each time here.
That's because the inner function required a single value y to be passed each time.

So as you can see, closures become a bit easier to understand when you check carefully the arguments
that they require.
Now you may be wondering what a closure is good for.
Are they actually used in Python?
What for?
The answer depends on personal preferences.
Some people make heavy use of them, some don't.
Closures can sometimes replace small classes.

If you have a class that only has one custom method, you can typically replace it with a closure and
the code will be shorter to read.
Some Python libraries and design patterns also use closures, so it's good to be able to identify them
when you read someone else's code.

========================
text file reading basics
------------------------------
Instead of starting with all the details related to opening streams, we'll begin by showing a very
simple example of text file processing.
The basic template for opening a text file and reading its content in Python may look something like
this.
I'm going to copy paste the code and let's analyze what happens in this piece of code.

try:
  stream = open('animals.txt')
  # code
  stream.close()
except Exception as e:
  print('an error occured: ', e)

First of all, the whole code is enclosed in a try except block.
That's because with file processing, a lot of things may go wrong.
A given file may not exist.
You may not have access to it.
It may be corrupted and so on.

That's why it's always a good idea to use a try, except block and somehow handle the exception.
The least you can do is as follows.
Here we just print the kind of error that appeared so that the user is able to know what went wrong.

Inside the try BLOCK You can see two very important instructions.
The first line opens the file by calling the open function with a single argument.
This is the most basic version of the open file you can find.
The result of the function should be assigned to a variable.
Otherwise, you will not be able to do anything with the file handler or file stream, in other words.

Then your file processing code begins.
It can reach the file one by line.
It can add new stuff to the file. up to you.

The last line in the try block should be a method named Close invoked on the stream object.
It's very important that you close every stream that you open.
Otherwise, you may run into memory problems very quickly.

Let's try to invoke the code twice, once with a valid existing file name and to once with an invalid
name.
As you can see, the text file is called animals dot txt and the same folder where the notebook is located.
I have created this file and it has the following content.
So now let's see what happens if we try this code.

As you can see with a valid name, we don't see anything in the output.
That's because our program doesn't do anything with the file yet.
It just opens and closes it.
But if we don't see any output, it's actually a good sign.
It means that Python successfully accessed the file and successfully created a handle the file.

Now let's change the file name to something that doesn't exist and let's see what happens.
And you can see that Python shows an error.
No such file or directory.

It's time to perform an actual operation on the stream.
instead of the comment, I'm going to do the following: 

try:
  stream = open('animals.txt')
  print(stream.read())
  stream.close()
except Exception as e:
  print('an error occured: ', e)

o: PIG is a domestic animal ...

the read method is the most basic way of reading the content of a file.
By default, it returns the whole content of the file, which you can conveniently print to the output
if you want to You can also specify the number of bytes that should be read, and each byte typically 
means one character so another version could be as follows.

Instead of just read, we are going to do read(10) and you can see the first ten characters printed
to the output.

try:
  stream = open('animals.txt')
  print(stream.read(10))
  stream.close()
except Exception as e:
  print('an error occured: ', e)

o: PIG is a d

Once you read the first ten bytes, the stream moves inside the file.
If you invoke read ten again, you will see the next ten bytes.
And what happens when the stream reaches the end of a file?
It returns an empty string.

We can easily check that by first trying to reach a lot of characters more than there are in the file
and then trying to read another portion.
So let's do the following In a new cell we are going to do read 10,000 and then try
to read another one and you can see that first all the text is shown and then we just have an empty
line printed.

try:
  stream = open('animals.txt')
  print(stream.read(10000))
  print(stream.read(1))
  stream.close()
except Exception as e:
  print('an error occured: ', e)

o: PIG is a domestic animal ...


So, note two things. If you ask Python to read more bytes than there are in the file, nothing bad will
happen.
Python will simply return the string with all the characters in the file and the pointer in this stream
will be set at the very end of the file, so any subsequent read call will just return an empty string.

So here with this method, no error is raised.
No exception is shown When you reach the end of the file and you try to use the read method.

Again, we can use these characteristics of the read method to read a text file character by character
until the end of the file.

try:
  stream = open('animals.txt')
  character = stream.read(1)
  while character is != '':
    print(character, end='-')
    character = stream.read(1)
  stream.close()
except Exception as e:
  print('an error occured: ', e)

o: P-I-G- -i-s- -a- -d-o-m-e-s-t-i-c- ... 

First, we read the very first bite from the file here, then in a while loop we check if the character
is an empty string.
We already know that an empty string returned from the read function means the end of the file.
So while the string is not empty, in other words, while there still are some characters in the file
we print, the current character, put a dash afterwards and we read another character from the file.
Once we reach the end of the file, we close the stream.

This technique of reading a file character by character can be very useful for a variety of situations.
For example, you can use it to count the number of characters in a file.

try:
  stream = open('animals.txt')
  counter = 0
  character = stream.read(1)
  while character is != '':
    counter += 1
    print(character, end='-')
    character = stream.read(1)
  stream.close()
  print(\n number of characters: ', counter)
except Exception as e:
  print('an error occured: ', e)
o: P-I-G- -i-s- -a- -d-o-m-e-s-t-i-c- ... 
number of characters: 103

So here I'm going to define counter equal to zero.
Now I'm going to read one byte.
And here, once the stream is closed, I'm going to do print and on a new line number of characters.

So here we introduce a counter before reading the file.
Character by character, we increased the counter by one every time we read a character and we printed
the total number of characters at the end.

You can also use this technique to count how many times a specific character appears in a file, how
many digits there are in the file.
If a given illegal character can be found in a file and so on, 
reading a text file, character by character also has another advantage 
You protect yourself against corrupting your operating system in terms of
very big files.

If the text file you're trying to read is a terabyte long file, then trying to read it all at once.
Using the read method without any argument will probably make your program crash.
The file is simply too big to be read all at once.
In such cases, using read one and reading the file character by character protects you against such
cases.

Another frequently used technique is reading files line by line, not character by character.
If you want to do that, you can use method readline instead of read.
It behaves similarly to read When it reaches the end of the file, it returns an empty string.

try:
  stream = open('animals.txt')
  counter = 0
  character = stream.readline()
  while character is != '':
    counter += 1
    print(line, end='-')
    character = stream.readline()
  stream.close()
  print(\n number of lines: ', counter)
except Exception as e:
  print('an error occured: ', e)
o: PIG is a domestic animal ...
number of lines: 3

And now instead of number of characters, we will have number of lines.
The code looks similar, but instead of using read(1), we use readline.
Note that even though we instruct the print function not to put a new line character at the end of the
print invocation, the lines are still shown in the output separated by new line characters.
That's because each line read from the file contains a new line character at the end by itself.

One more method worth mentioning is read lines with an S at the end.
If you invoke this method without any argument, it reads all the file contents line by line and returns
a list of strings.
One string per file line.
Again, if the file you're trying to read is very big, you may run into performance problems.

try:
  stream = open('animals.txt')
  character = stream.readlines()
  print('content of the lines var:' lines)
  print('number of lines in the file:', len(lines))
  for line in lines:
    print(line, end='')
  stream.close()
except Exception as e:
  print('an error occured: ', e)
o: Content of the lines var: ['PIG is a domestic animal.\n', 'LION is a wild animal.\n', 'FOX is a wild animal.'],
number of lines in the file: 3
PIG is a domestic animal.
LION is a wild animal.
FOX is a wild animal.
Let's see how that works in practice.

And here the lines variable keeps a list with strings representing individual lines, as you can see
here.
We first print the whole variable to analyze what it contains.
You can see a list with three strings.
Then we can use a for loop to conveniently print each line.

Readlines can also accept an argument with the suggested number of bytes to be read at once.
If you have very short lines in your file, each of them one character long using ridge lines two will
make python reads two lines into the list at once.
If your lines are two characters long using lines two will make Python read to one line in one go.

And if your lines are longer than two characters, Python will increase the limit so that at least a
single line is read into the list each time.
If you get an empty list, it means that you've reached the end of the file.

Take a look at this version of the code.
inside a while loop, we check if the number of elements in lines is zero, which would mean that
we've reached the end of the file and it's time to say goodbye.
But if we still have some elements in the list, we enter the why loop and then use a nested for loop
to print all the lines one by one.
Afterwards we call the read lines function again.

try:
  stream = open('animals.txt')
  character = stream.readlines(2)
  while len(lines) != 0:
    for line(lines) != 0:
      print(line in lines):
  print('content of the lines var:' lines)
  print('number of lines in the file:', len(lines))
  for line in lines:
    print(line, end='')
  stream.close()
except Exception as e:
  print('an error occured: ', e)
o: Content of the lines var: ['PIG is a domestic animal.\n', 'LION is a wild animal.\n', 'FOX is a wild animal.'],
number of lines in the file: 3
PIG is a domestic animal.
LION is a wild animal.
FOX is a wild animal.
Let's see how that works in practice.

You may be wondering if this version of the script makes sense.

It's more complicated than the version with Ridge Line where we read single lines because we need to

introduce a nested loop here.

But there's a good reason to do that.

The performance may increase.

Typically, reading more than one line at a time means better performance.

But remember that reading all the lines at once may crush your program.

If the text file is very big.

There is no golden number here, so I can't tell you that you should always read, I don't know, ten

or 200 lines at a time.

It all depends on your operating system, your machine power, and the text file.

You need to perform your own experiments to find the best number of lines to read.

Finally, there's one more way you can reach files line by line.

It's actually quite surprising.

You may use the stream itself.

That's because by default, the stream that you get by calling the open function is an object that is

iterable.

Iterable objects can be iterated using the full loop, just like sequences.

This way the stream will return another line of the file in each iteration of the loop, and it turns

out that you don't even need to close the stream if you use this technique.

When you reach the end of the stream with this technique, Python will automatically close the stream

for you.

All of that means that you can use the following short code.

We are going to use the very first cell copy paste it.

Into a new one.

And we are going to do the following.

Get rid of this and do full line in stream.

Print line and end it with an empty string just like this.

Note how short, clear and easy to read this code is.

Again, that's the power behind Python.

You can perform many typical tasks very easily because Python has ready made solutions for you.

Reading a file line by line is one of them, as you can see.
