Exceptions - syntax errors
-----------------------
you can use the default except block to catch any sort of exception:

try:
  # your code
except:
  # any exception
However, there is one special exception type: SyntaxError. You should pay attention to how it works.

If you raise a SyntaxError manually, then you can catch it in the except block just fine:

try:
  raise SyntaxError
except:
  print('Got it!') # SyntaxError is caught here

However, if you make a syntax error in the try block and Python automatically raises a SyntaxError for you, then you cannot catch it:

try:
  5:4 # this line generates a SyntaxError
except:
  print('Got it!') # SyntaxError is NOT caught here

================
try/except with else
------------------
try: 
    value = int(input('enter an int: '))
    print(1/value)
except:
    print('something went wrong')
else:
    print('everything is perfect')

if we provide 0 - first branch will be printed
if we provide any other value - second branch will be executed

==========
finally
----------
Finally, Python offers an additional keyword that can be used with try accept blocks.
Finally, it must be the very last branch of the code intended for handling exceptions.
It must appear even after the ls block ls and finally are not dependent on each other.
You can have both of them.

You try block only one of the two or none at all.
The general rule is that the final block is executed always, no matter if an exception is raised or
not, no matter if a raised exception is handled or not.
Then finally, BLOCK will always execute in real life programming.
Finally, blocks are typically used when we work with some external resources, such as databases or
text files.

For instance, when we want to retrieve some data from a database, we first need to open a connection
to the database, then retrieve the data and then close the connection.
It's then a good idea to close the connection in a final block, no matter if our code succeeds or not.
No matter if we manage to retrieve the data or we get a connection error, we should always close the
connection to the database to limit the amount of memory that the machine uses.

So I'm going to give you a simple example of finally using a division error.
We are going to define a function named get inverse.
And we are trying to return the inverse of X.

def get_inverse(x):
  try:
    return 1 / x
  except ZeroDivisionError:
    return None
  finally:
    print('i am always printed')

print(get_inverse(5))

output1: i am always printed
0.2

print(get_inverse(0))
output1: i am always printed
None

Now we know that this may produce some errors, so we are going to accept zero to vision error.
In which case we return none.
And we are going to add a final block here and we will print.
Run the cell and now in the new cell we are going to do print, get in verse five, which is all good.
And you can see 'I am always printed' to the output and now with an exception, if we provide the number
zero, you can also see 'I am always printed'.

So note that in both situations the final block is executed before the function finishes and returns
the actual number.
In the second case we get a zero division error and we return none.
But before that happens, in both cases we see I am always printed to the output because of the final
block.

==========
raise exception
----------
So far we've only seen examples where Python raises exceptions for us when we try to divide by zero.
Python automatically erased an exception when we tried to access a non-existing array index.
Python raised an exception. All of that happened automatically for us.

Python allows you to raise exceptions on your own.
Raising exceptions on your own is typically used in two types of situations.
When you write tests to check your programs, you can raise exceptions to verify how your piece of code
will behave.
If, during the execution of your program, Python suddenly raises a real exception.

The second use case is when you want to make another part of the program responsible for handling the
exception.
This can be very useful in larger applications.
To raise an exception, we use the keyword to raise, followed by the name of the exception.

For example, let's say that we want to define a function that returns the bigger number of two.
we want to check if a or b is not an instance.

def returb_bigger(a, b)
  if not isinstance(a, int) or not isinstance(b, int)
    raise ValueError
  if b > a:
    return b
  else:
    return a

print(return_bigger(5, 3))
out: 5
print(return_bigger(5, 'b'))
out: valueerror

So here in the return bigger function, we assume that both arguments will be of type integer.
We checked out at the very beginning of the function.
If at least one of the numbers is not an integer, we manually raise a value error here by using the
raise keyword.
You can see how that works when we try to invoke the function with an invalid argument.
There's also another usage of the word riase.
You can use it without any exception name inside the except branch.
This instruction will then raise the very same exception as currently handled.

def return_reverse(x)
  try:
    return 1/x
  except:
    print('something went wrong')
    
return_reverse(0)
out: something went wrong

So this is a version without the keyword raise.
And if we do return reverse of zero.
When we run the coach, you can see that for argument zero.
We simply see something went wrong printed.
What happens when we add the raise keywords?

So let's copy paste that into a new cell like this.
And here we are just going to add to raise run the cell again.
And now if you try the very same invocation.
This time you can see something went wrong in the output, but we can also see that the zero division
error was raised again.

def return_reverse(x)
  try:
    return 1/x
  except:
    print('something went wrong')
    raise

return_reverse(0)
out: zerodivisionerror

This programming technique is sometimes used when you only want to handle an exception partially, and
then you want to raise the exception again.
So that's another part of the code finishes the exception handling.

===============
exceptions as objects
----------------
talk about the objective nature of exceptions.
Yes, exceptions in Python are objects.
Whenever an exception is raised in Python, an object of the given exception class is created and it
goes through all the branches of the try except block to find a matching branch.
The exception object has some information that you can use to precisely identify what went wrong.
In order to get that information, you need to extend your accept block using a special keyword as take
a look.

We are going to write a function named Return Bigger that you already know from one of the previous
videos.
If B is larger than a return B, else return A except exception.
As E and now print E and return none.
And now if we try print, return figure of five and let's say be, you can see a new kind of message.
So first of all, note how we use except exception as the moment we do that, the moment we add as 'E',
we can refer to the exception object within the accept block using the identifier 'e' inside the brackets
we try to print 'e', so let's see what that does.

def return_bigger(a, b)
  try:
    if b > a:
      return b
    else:
      return a
  except Exception as e:
    print(e)
    return None

return_bigger(5, 'b')
out: '>' not supported between insances of 'str' and 'int'
None

You can see that when we try to print the exception object, we get some detailed info about what the
problem was.
That's because by default the exception class implements a version of the double underscore str double
underscore method common to all objects.
Instead of showing the identifier of the object in the memory, we can find a meaningful error message.
In this case, we can see that it's not possible to compare a string with an integer exceptions in python
form a class hierarchy.

For instance, we can try to print the following statement.
So in a new cell you're going to do for subclass in Baseexception subclasses
print subclass name like this you can see all the subclasses that directly inherit from the base exception
class and if you try one of the subclasses like exception for example.

for subclass in BaseException.__subclasses__():
  print(subclass.__name__)
output:
Exception
GeneratorExit
SystemExit
KeyboardInterrupt
CancelledError
DebuggerInitializationError

for subclass in Exception.__subclasses__():
  print(subclass.__name__)
output:
StopAsyncIteration
StopIteration
ImportError
OSError
EOFError
RuntimeError
NameError
AttributeError
SyntaxError
LookupError

There are a lot of classes that directly inherit from exception.
Each exception class that inherits from BaseException has a property named Oryx.
It's a tuple which contains all the arguments passed to the constructor.
For example, try raise exception except exception as e print e arcs.

try:
  raise Exception
except Exception as e:
  print(e.args)    

output: ()

In this simple case, the code only raises a general exception when we try to print the property of
the exception object.
You can see that it's actually empty.
This means that no argument was passed to the class constructor.
Let's try a different version now.
So this time we're going to do something like this and add the following element here.

try:
  raise Exception('i do not like it')
except Exception as e:
  print(e.args)    

output: ('i do not like it',)

Note the new syntax that we use now here.
After the keyword rise and the exception class, we provided a pair of brackets and we put a string
inside.
If this syntax looks familiar to you, you are right.
We're actually invoking the constructor of the exception class.
With one argument exception classes in Python are constructed in such a way that you can pass even more
arguments to the exception constructor so we can do the following in the new cell.

try:
  raise Exception('i do not like it', 'in fact, i do not like it at all')
except Exception as e:
  print(e.args)    

output: ('i do not like it', 'in fact, i do not like it at all')

All of the arguments passed to the constructor are added to the property.
This feature is typically used to pass some details about why a given exception is raised.
In fact, you can easily see that Python adds some arguments when it raises exceptions automatically
for you.

try:
  1/0
except Exception as e:
  print(e.args)

output:
('division by zero',)

Here, Python raises an exception when you try to divide by zero.
And as you can see, Python added a short explanation to the tuple.
Another example could be the following.

try:
  5 < 'a' 
except Exception as e:
  print(e.args)

output:
("'<' not supported between instances of 'int' and 'str'",)

==============================
naming your own exceptions 
--------------------------------
Python makes available a few dozen exception types organized into an exception hierarchy, but exceptions
are classes like any other.
You can use inheritance to create new ones as you consider necessary to do that.
All you have to do is put the name of the chosen exception class as the superclass for your own exception.
Since Python has so many built in exceptions, it can be difficult to choose which exception should
be the superclass for your own exception class.

The rule of thumb is if you want to create an exception, that will be a special case of an exception
already available in Python, Use that one particular Python exception as the superclass.
For instance, if you create a function that expects a specific kind of value in one of its parameters
and that value is somehow wrong, you can extend the value error class.

class AnimalValueError(ValueError):
  pass
def produce_animal_sound(animal_type):
  if animal_type == 'DOG':
    print('woof, woof!')
  elif animal_type = 'Cat':
    print('Meow!')
  else:
    raise AnimalValueError

produce_animal_sound('DOG')
out: Woof, Woof!

But if you try something else like pig, you can see AnimalValueError.

produce_animal_sound('PIG')
out: AnimalValuError

So here we create an exception class named AnimalValueError.
Since we want it to be a specific subtype of the value error, we denote value error as the superclass
for AnimalValueError.
Note that we do not need to provide any specific content for the new exception type.
Everything we need to successfully use this kind of exception will be inherited from the ValueError
class.
Now we have a function that expects a string argument named produce_animal_sound.

Depending on the type of animal passed, a different sound will be imitated.
However, if the use of the function provides something different than one of the expected animal types,
we raise an AnimalValueError with a descriptive error message.
When we invoke the function twice now you can see how the new type of exception is raised in the second
invocation.

Note that you can pass some arguments to the constructor and the code will work fine and the more value
error inherits the constructor from the ValueError class.
That was an example where we created a very specific kind of exception class.
But in bigger applications, it may be necessary to create a whole structure of new exception types,
in which case it is probably better to inherit from one of the more general exception classes.

Imagine an application for multiple users where all of the actions are done by specific people.
We want to have our own exception classes and we have a very specific requirement.
The exceptions should always contain the login of the user that caused the error.
We will choose exception a very general exception class provided by Python as our base class.

class UserActionException(Exception): # here we define user action exception, which inherits directly from Exception.
  def __init__(self, message='', user_id=''):
    Exception.__init__(self)
    self.user_id = user_id
    self.message = message
  def __str__(self):
    return type(self).__name__ + ' occured. Error message: ' + self.message + ', userId: ' + self.user_id

def say_hello(name, user_id):
  if name == '':
    raise UserActionException('empty name!', user_id)
  print('hello', name)

try: 
  say_hello('adam', 'DT324')
  say_hello('', 'DT324')
except Exception as e:
  print(e)

So 

We defined a constructor.

Remember, we need to use the name double underscore in its double underscore.

And this enables the user to provide two very specific arguments one for the error message, the other

one for the ID of the user that was related to this error.

As the first instruction in the constructor, we invoke the constructor of the superclass.

Then we create two new properties, one called user ID, the other one called Message.

Thanks to that, our own exception type, whenever we raise it, will be equipped with these two properties.

You can also see that we override the default double underscore str, double underscore method so that

it returns a meaningful error message alongside the name of the exception class and the user ID.

Now we create a function named say hello.

This function expects to argument the name of the user that will be used to create the user and the

user ID which will be used in the event of raising an exception.

You can now see that when the name is empty, we raise our own custom user action exception.

We provide a very custom message which will go into the message property and a very custom user ID which

will go into the user ID property.

Now in the main part of the code, we use a try except block when an exception or any of its subclasses

such as user action exception is raised, we print the exception object.

And as you can see in this particular case, our custom STR method is used and we get a nice error message.

Now, of course, we can also create our own exceptional class structure.

We can inherit from user action exception to create more specific exception types.

So for example, in a new cell we are going to do the following class empty name user action exception.

Inherits from user action exception like this def in it self.

User id default value of an empty string super in it and empty name was provided with the user id like

this.

And now in the new cell death.

Say hello name and user ID if name is empty.

Raise this particular exception with the specified user ID.

Otherwise print.

Hello.

Goodnight.

And now if we try the code again.

Like this.

We are going to see an empty name was provided from here.

So we create a new exception.

Class empty name, user action exception.

It is a specific case of user action exception, which is the superclass for it.

The only thing we define in this exception class is the constructor.

We invoke the constructor of the superclass here, but we provide a very specific error message.

This means that we can now raise empty name user action exception like here, and we do need to provide

the error message like before because the class itself produces a nice error message.

Such an exception type can be useful if you need to raise an exception related to empty names in many

places.

Instead of providing the error message, empty name and all of them, you can simply use this very special

kind of exception type.

And of course, depending on your needs, you can create new kinds of exceptions that inherit from user

action exception, or even ones that inherit from empty name user action exception.
