INTERNAL STRING REPRESENTATION
--------------------
You already know that there are various variable types in Python, such as integers or strings.
You know that a string is a text value and that they are introduced with either single or double quotes.
You need to find out how string values are stored internally in Python.

Deep down, computers store characters as numbers.
Every character has a unique number, and every unique number corresponds to a unique character.
There are some characters that may seem obvious, such as small literary or capital literary, but there
are also some other characters which are less obvious.

There is a dedicated number for a space that we usually use between words in a sentence and another
number for a character that indicates the end of a line something like an enter character.
This representation of characters as numbers is often called character encoding.
Of course, every computer manufacturer could come up with their own numbers for all the characters,
but that would be very complicated.

In practice, there are some standard encoding that almost all computers in operating systems have in common.
One of the most widely used in coatings in the world is called ASCII, which is short for American Standard
Code for information exchange.
This code provides space for 256 different characters, of which the first half, the first 128 characters
are the most significant ones.

Take a look at the ascii coding table.
Now, for instance, you can see that a small letter has a code of 97.
A big letter A has a different number, 65.
A plus sign is assigned to the number 43, and a space character can be found under 32.
These numbers represent the concrete characters are called code points.
And of course, internally, deep down in your computer, those integer numbers are translated into bits.
Long sequences of zeros and ones.
ASCII encoding allows you to represent 256 characters to 156 character possibilities translates to eight
bits or one byte.

It's only covers the basic Latin alphabet that we mostly use in English.
How about special characters that you will find in other languages?
How about the Spanish sound, the German or the Polish sound?
How about languages that use completely different characters like Russian or Japanese?
I told you that the ASCII encoding has enough space for 256 characters and I have only shown you the first half.
But could we fit all the remaining special characters in the other half?

For instance, the Japanese language makes use of thousands of kanji characters, so it would be impossible
to keep them all within the ASCII bounds.
It's not enough to keep all the characters for all the languages within ASCII, but in many cases ASCII
could be enough for one particular language or for a group of similar languages that share similar characters.
In this case, we use the concept of a code page.
A code page is a standard for using the remaining 128 code points for ASCII to store specific national characters.

All of the code pages share the first 128 code points that you have seen already.
You will find different code pages for languages from Western Europe, Eastern Europe, Cyrillic or Greek.
This means that the same codes point or in other words, the same number in the ASCII table could represent
different characters depending on the code page.
For instance, the ISO IEC 885992 code page for languages such as German, Polish or Czech.
In these languages, in this code page, the code point 223 means as sharp as the character used in German.
But the same codes point to 123 in ISO IEC 885954. Cyrillic is the letter per.
In this particular alphabet, all of this means that if you want to know the character behind a given
number, behind a given code point, and that code point is higher than 128, you need to know which
code page we are talking about.

The concept of finding a solution to the problem with multiple alphabets for multiple languages is known
as I18n, and it is short for internationalization.
Internationalization starts with IE is followed by 18 characters and finishes with n.
That's how the shortcut I18n and was created.
The code pages for different alphabets in ASCII helped solve the problem of ising and for some time,
but it was actually a pain to always remember about the proper code page.
Chances are that you have seen that somewhere already.
Maybe you've seen a text file that used the wrong encoding.
Maybe you had that problem with the subtitles to your favorite film.
The end result is usually that many characters are substituted with ones from another code page and they look funny.

At some point, computer scientists decided it was time to find a better, more universal encoding.
This universal encoding is called Unicode.
Unicode doesn't use code pages, so there is no choosing between specific encoding for specific languages.
Each character has its own unique number, and Unicode can store more than a million different code points.
The first 128 code points in Unicode are identical with ASCII, and the next 128 code points are identical
with the code page designed for Western languages.
But Unicode is actually just a standard.

It doesn't explain how to code or store all the characters in the memory of your computer.
Unicode only lists all the available characters, and each character can be placed in a plane.
A plane is a group of similar characters. There are 17 planes in total.
For instance, the first plane is the so called basic multilingual plane.
Plane two in turn is the supplementary geographic plane for languages such as Japanese or Korean.

There is more than one technique to actually implement Unicode and specific computers.
One of the most widely known standards is UCS4
S is short for universal character set in UX for each character uses 32 bits or four bytes to store a character.
The problem with UCS4, however, is that it takes a lot of space.
You need as many as 32 bits to keep a single character.
If you compare that to eight bits in ASCII. You will quickly see that your files grow in size four times.
Fortunately, there are other forms of encoding Unicode.

One of them is called UTF-8.
It's a name you may have already come across somewhere.
The good thing about UTF-8 is that it only uses as many bits for each character as are really needed.
All standard ASCII characters occupies exactly eight bits, just like in the ASCII format.
Non Latin characters from other languages like Polish or Spanish occupy 16 bits and the characters used
in China, Japan and Korea occupy 24 bits.
Python fully supports UTF-8.nYou can use UTF-8 characters to name your variables.

In practice, this means that your variables could be written in English, Spanish, or even Japanese characters.
And Python will do just fine.
Although keep in mind that we always try to use English names in programming so that others could understand
your code.
You can also use all UTF-8 characters during input and output.
If you ask a user to provide their name using the input function and they provide something in Japanese
characters, Python will take care of that without any problems.

STRING OPERATIONS
----------------
Keep in mind that python strings are immutable sequences.
It means that you can, for example, use the length function to get the number of characters in a string.
If you have an empty string, its length will be zero.
You can also use brackets with an index to access any given character in a string.
Remember that indexes start at zero.

# len('hi there!') #output 9
# len('') # output 0 
# print('hi there!'[1]) # output i

You can also use slicing to get a substring, for example.
# print('hi there!'[1:]) # output: i there! 
# get all the characters starting a character with index one.

# print('hi there!'[:5]) # output: i there! 
We can do something like this to get all the characters until the character with Index five exclusive.

# print('hi there!'[3:6]) # output: i there! 
Or you can do 3 to 6 and then you will get characters from the character with index three inclusive
until index six exclusive.

Keep in mind that certain characters are special characters and that you need to put a backslash before them.
One of them is an apostrophe.nSo if I want to print, I'm Adrian.
I will have to do \ before and now it works fine. print('I\'m Adrian')
Keep in mind that the escape character is not included in the string length.
It is not encoded as a character in the string internally.
It's just a piece of info for Python to know that the character coming after the backslash is a special one.

Remember how we talked about ASCII and Unicode encoding?
We mentioned that each character has a certain number assigned to it, also known as a code point to
get to know the code point for a given character.
You can use the Ord() function.
This function can only accept a one character string.
If you try to provide anything else, you'll get an error.

# ord('a')
output: 97
# ord('A') 
output: 65

A reverse function is chr()
If you provide a number as its argument, you will find the character behind it.
# chr(65)
output: 'A'

A python allows you to use multi-line strings too, The syntax is a bit different.
You need to start and end the string with triple quotes.
# test_string = '''line 1
line_2'''

Now, let's see how many characters there are in this string.
# len(test_string)
output: 13
You can see that there are six characters on the first line, including a space between the words.
There are another six characters on the second line. This gives 12, but Python shows 13.
How is that possible?
The answer is an invisible character between line one and two, which instructs Python that a new line
should be introduced. Without the special character, Python would simply interpret this string as line one, line two 
with no spaces between them.

The special character is called Line Feet and it is frequently expressed as \n, and this character
is included in the length of the string and has a length of one.
Strings can also be concatenated or in other words, joint with the plus sign.
ex. 'aaa' + 'bbb' 
aaabbb'
or multiplied
ex. 'aaa' * 2  
'aaaaaa'

Normally the plus sign is used to add numbers and the asterisk sign is used to multiply them.
With strings, there are used differentially.

This phenomenon where the same plus operator can be used
for different kinds of data to produce different results is called operator overloading.
We say that the plus sign is overloaded so that it can be used with strings to join them together into a bigger string.
Note that in the case of numbers, the order of numbers doesn't matter.
So two plus three is the same as three plus two. That gives the same result.

However, the order starts to matter when the operator is overloaded to work with strings.
So a plus b-bbee, as you can see here, is this string.

But if you try to reverse the elements like this, you get a different result.
If the order doesn't matter, we can say that the operator is commutative.
If the order is important, the operator is not commutative.

You can also iterate over a string.
For example, 
for char in 'hello from the world of python'
  print(char, end='-')
h-e-l-l-o- -f-r-o-m- -t-h-e- -w-o-r-l-d- -o-f- -p-y-t-h-o-n-

Keep in mind that python strings are immutable.
This means that once you create a given string, you can't change it.
You can only replace it with a new one.
For example, you can't use the del keyword to delete a character from a string.
So let's say we have a string with an obvious typo at the beginning and we would like to get rid of
it using the DEL operator.

text = 'dHello there!'
del text[0]
output: TypeError: 'str' object doesn't support item deletion

You can't use insert or append either, so there is no way to add a new character into a string either.

The min() function looks for the smallest element in the sequence.
How will it work with a string?

min('ilovetravellingaroundtheworld')
output: 'a'

That's because if we convert all the characters into numbers according to the ASCII encoding, the letter
A will have the lowest number.
Note that if we add any space into the string.
You will get a space printed to the output.
And that's because a space has a lower number than any letter from the English alphabet.

min('ilove travellingaroundtheworld')
output: ''

Consequently, the max function finds the character with the highest code point.
max('ilovetravellingaroundtheworld')
output: 'w'

Searching inside strings
--------------------
First, there's an index function which returns the index of the first occurrence of the given value.
I have a string here and now if we run the code, you can see number seven in the output.
# 'ilovetravellingaroundtheworld'.index('a')
output: 7
- this function returns the index of the first letter A in the string.

Even if there are more letters A in the string, a similar function to index is called find().
Just like index(), find() looks for a given character or substring and returns the index of its first occurrence.
However, there are two differences.
First of all, it's safer to use.
Index() raises an error if a given value can't be found in the string.
In turn, find() returns -1 in such cases.

Second of all, you can use index() with various types of sequences like strings or lists, but find() only
works with strings.
Here I have a string prepared and now I'm going to do print my text index of is.

my_text = 'This is my sample string'
print(my_text.index('is'))
print(my_text.find('is'))

In this case, both methods behave in the same way.
Let's look for something else which is not there.

my_text = 'This is my sample string'
print(my_text.index('are'))  # returns ValueError subsctring not found
print(my_text.find('are'))

my_text = 'This is my sample string'
#print(my_text.index('are')) 
print(my_text.find('are'))
output: -1

Find also has a two argument and a three argument version.
You can use them to limit the range of characters to check in the string.

my_text = 'This is my sample string'
my_text.find('is', 10)

Starting at index ten, this version will start looking for the substring from character with index
ten inclusive until the end of the string.

And a third option with three arguments.
Just three arguments version will start looking for the substring and character ten inclusive and will
stop at character 15 exclusive.

my_text = 'This is my sample string'
my_text.find('is', 10, 15)

There is also a function named rfind() which is short for right find.
It works the same way as find, but it starts looking for the given substring from the end of the string,
not from the beginning.

If there is zero or just one place in the string where the given substring occurs.

This function will work the same way as find.

But if the given phrase is repeated more than once, it will return a different index than find.

And just like with find, you can use a version with one two of three arguments.

The second and third arguments will indicate the beginning and the end of the place in the string where

the occurrence should be found.

Now is a good time for you to stop the video and experiment a bit with both find and ah, find.

Try to invoke something like this where we have the words work in a string repeated multiple times and

then you try with both find and ah, find.

And you try that with the two arguments and three argument versions.

Make sure that you understand all of the invocations.

If you have a problem with one of them, just use the courses Q&A section to ask and I'll be happy to

help.

And also there are a lot of is something methods for strings for example is al num.

This method will check if the string contains only alphanumeric characters.

In other words, it checks.

If the string only contains alphabetical characters and digits, you'll get true or false as the result

of this method, for example.

Adrian.

As a string is alum.

True?

If you try a turn 30, it also returns true.

But if you try a different space 30, you will get to false.

And if you try a different underscore 30, you will also get false.

There are two similar methods to S alum.

One is called is alpha.

So for example.

Is Alpha.

And it checks for letters only.

And there is also is digit.

I'll use the same string is digit.

That checks four digits only.

There are three more methods that are very similar, so we won't give any examples.

The methods are is lower, is upper and is space is lower, returns true of all the characters are lowercase,

letters is upper, is the opposite.

It only accepts uppercase letters is space checks if the given string contains white spaces.

Only note that the space character is not the only white space character accepted by this method.

A new line character backslash n is also accepted, for example.

All right.

That's it for this video.

You can now save the notebook and close it.
