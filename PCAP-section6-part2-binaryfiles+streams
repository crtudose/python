binary files basics
------------------
So far we've only worked with text files.
Python can also treat files as binary files, but what is the difference between text files and binary
files in the first place?
In a way, there is no difference because both text files and binary files are simply files.
Files in the most general sense are just containers for data, and the data is stored as very long sequences
of bytes.
Sound files with your favorite music.
Image files with the pictures from your holiday.
A simple video game in an executable file and text files behind the scenes.
They are actually all the same.

They are just very long sequences of bytes or in other words, very long sequences of ones and zeros.
These bytes are always organized in a certain way.
For instance, image files could be stored as bitmaps with groups of bytes representing individual pixels
in the picture.
So your bitmap file could be just a long sequence of bytes providing information about the image pixel
by pixel.

You then need a specific program on your computer that understands the bitmap format to interpret the
bytes correctly as pixels so it can show you a picture as a result.
Other file formats, such as MP three sound files or executable game files, will use bytes in a different
way, and you will need different programs to open them.
But essentially they are all the same.

Long sequences of bytes text files are also binary files.
They are just a special type of them.
It's a type where the bytes are translated into ASCII or UTF eight characters by your text editor.
Deep down, however, they are all the same bytes.
Python allows you to work with files in two way.

The most generic way is to work with files as binary files.
In this case, you will need to deal with very raw data that is very hard to handle.

Dealing with single bytes could lead to many errors because bytes are harder to reach by human beings.
That's why Python also offers another way of working with files, working with files as text files.
And you already know how to do that.
Text files are very practical because it is much, much easier to work with specific characters than
with bytes.
Text files can store a lot of useful information for you, so working with text files is the most pragmatic
way to do that.

how to work with files in Python by treating them as raw binary files.
This will be much more abstract and much harder than working with text files, so we are just going
to present the necessary basics for the Pcap examination.
Chances are, however, that you will not need to work with binary files at all.
So don't focus too much on this aspect of Python programming for practical reasons.
Python has a few containers for storing sequences of bytes.
One of them is a class named byte array, just as the name suggests.
It's an array of bytes and the array is conceptually similar to a python list.
It's a container of all elements.

To create a bit array.
In Python, you can simply do the following data equals byte array 100.
This line will create an array with 100 bytes and initially they will all equal zero.

data = bytearray(100)

Recall that a bite is eight bits and with eight bits you are able to represent an integer number in
the range from 0 to 255.
And in Python, you can treat bytes exactly as integer numbers, so you can do something like this.
Data zero equals 100.
This will set the first bite of the bitrate of the binary representation of the number 100.

data[0] = 100

We can simply use square brackets with indexes, just like with lists, to assign values to specific
elements of the array.
Remember that the maximal integer you can store in a byte is to 155.
If you try to store something bigger, you will see an error.

data[0] = 270
o: valuerror - byte must be in range 0, 256

These are the basics of creating binaries in Python.
Now it's time to save them into a file.

data = bytearray(100)
data[0] = 100
data[1] = 120

And now we are going to do the following:
try:
  stream = open('file.bin', 'wb')
  stream.write(data)
  stream.close()
except Exception as e:
  print('an error occured', e)

We create a byte array with 100 bytes inside, then we completely randomly set the first two bytes.
There's no specific reason that we used 100 and 120.
These are just some random values I came up with without thinking.
Then follows the typical try accept block that you can see many times already.
Two things that are noteworthy are.
First of all, look at the second argument for the open function.
It says WB, which stands for write binary.
This B letter is very important because it informs Python that it should not treat the file as a text
file.
Second of all, note how we passed the binary as an argument for the write function.

As you can see, the write function is quite flexible.
If you open the file in the text mode, you can pass strings as arguments.
If you open the file in the binary mode, you can provide byte arrays as arguments.
if we run code, We can see no errors, which pretty much means everything went smoothly.

Now, let's try to locate the file in the file system and see what it contains.
Jupiter is trying to interpret the file as a text file.
We set the first two bytes to some random numbers, and Jupiter is trying to interpret them as ASCII
characters.
After the first two bytes, we didn't do anything.
The bytes were set by defaults to zero and bytes zero in the ASCII table represents null a void character
that does not contain any data.

As you can see, Jupiter shows the nulls as strange red dots.
We can also try opening the file in another editor like Notepad Plus Plus on Windows, for example,
here, instead of the red dots, you can see null.
text Editors, as you can see, are not ideal tools to open binary files so you can instead try a binary
file viewer.

There are many such tools available for download or online.
I personally just typed online binary file viewer into Google and found this particular website, but
you can try another tool as well.
So let's open the file here and look how the binary file is shown in the binary editor.
We can see much more data into binary editor here.
If you click on a particular byte you will see its value as an integer.
You will also see the ASCII representation here on the right of the given byte.

You may be also wondering why we can see numbers 78 here and 64 here instead of the integer values of
100 and 120.
That's because these two numbers are hexadecimal values, not decimal ones.
That's just another numerical representation system other than binary and decimal.

We know how to write bytes into a binary file.
Now let's take a look at how we can read them from a binary file.
You already know the right methods from Python streams, and you can use the same method to read bytes.

try:
  bf = open('file.bin', 'rb')
  byte_array = bf.read()
  bf.close()
except Exception as e:
  print('an error occured', e)

We open file that bin, the very same file that we created earlier on in the RB mode, which stands
for Read Binary.
Then we use the read method without arguments to read the bytes.
We get a special object similar to a byte array as a result, and then we close the stream.
And now we can actually use the print method to show the content of the variable like this.

print(by_array)
o: b'dx\x00 ... 

The print result isn't particularly pretty, but at least we can see that we successfully read device
into the byte array.
If you want to, you can print all the numbers as hexadecimal ones using the following construction

for byte in byte_array:
  print(hex(byte), end='')
o: 0x640x780x00x00 ...

Print hex of the byte.
And finish up with an empty string like this.
Or if you prefer, you can print the bytes as plain old integer values in the decimal system so you
can do the following.

for byte in byte_array:
  print(int(byte), end=' ')
o: 100 120 0 0 0 ...

Instead of hex we can do int and then maybe use a space between the characters like here.

Now there's one problem with the code.
If the binary file is very big, the content of the file may not fit into the available memory.
That's why there's also an alternative way to read binary data.
You can provide the read method with an argument that will denote the maximum number of bytes to read.

After the reading operation, the cursor in the binary file will be placed after the first ten bytes
so that the next time we use read it will start from the byte with number 11.

try:
  bf = open('file.bin', 'rb')
  byte_array = bf.read(10)
  bf.close()
except Exception as e:
  print('an error occured', e)

print(by_array)
o: 100 120 0 0 0 0 0 0 0 0

And if we now use, for instance, this specific version of the code, you can see only ten bytes read
into the memory and that's it.

==============================
Reading binary files: read() vs readinto()
---------------------------------
The read() method mentioned in the previous lesson reads all the contents of the file into the memory. This method creates an object of a special class called bytes (see variable newly_created below):

try:
	bf = open('file.bin', 'rb')
	newly_created = bf.read()
	bf.close()
except Exception as e:
	print('An error occured:', e)

The bytes class is very similar to bytearray that we mentioned in that video. There is one difference: the bytes class is immutable (once created, it can't be changed).
If, for some reason, you need a bytearray object rather than a bytes object, you can simply wrap the bf.read() method call like this: bytearray(bf.read()). This will return a bytearray rather than a bytes object.
Another option to get a bytearray is to create it manually and then use bf.readinto(bytearray) instead of bf.read():

data = bytearray(10)
try:
    bf = open('file.bin', 'rb')
    bf.readinto(data)
    bf.close()
except Exception as e:
    print('An error occured:', e)
 
==============================
file handle modes
---------------------------------
We've already worked with the open function that tries to access a specific file and create a handle
for it.
However, we haven't seen all the options it offers

The open function that creates a stream for us can take many arguments, as you can see in the documentation
The most important ones are the first and the second argument.
The first argument is the file to be associated with the stream.
This argument is mandatory and we've used it all the time.
The second argument is the mode.
The default is R, which stands for Read Text Files mode.

You could see that we changed the mode on a couple of occasions when we instead wanted to write into
a file or we wanted to work on binary files.
In general, there are seven characters that you can use when specifying the mode.
You can also use a combination of these characters to create more sophisticated modes.

The characters are R, which means open the file for reading.
The given file must exist and be readable.
Otherwise you'll see an exception.
This is the default mode and we've used it already.

W which means open for writing.
If the given file exists, all of its content will be erased.
So you can push your own data into an empty file.
If the file doesn't exist, it will be created for you from scratch.
We've also used this mode already 

x which means open for exclusive creation similar to W, but the file must not exist.
Otherwise you'll see an error 

a which means append or open for writing at the end of the file.
This mode is similar to the right mode, but if the file exists, the existing content of the file will
not be deleted.
Instead, you will be able to add data at the end of the file b which means binary.
This will open the file as a general binary file, not as a text file.

T, which means text mode.
This is the default mode, and you don't need to add this letter at all.

And finally, plus, which means open for updating both reading and writing.
So for instance, you can create the following combinations are A plus b open the file as binary in
their read mode, but also allow writing without deleting the existing content.

Or W+ open the file as text in the right mode, but also allow reading its content.
It would take a long time to show you all of the combinations in practice and I guess it would be quite
boring to go through all of them if already seen the most useful modes in the previous lesson.

==============================
predefined streams
---------------------------------
For this lesson, you will have to open up Jupiter Lab instead of Jupiter Notebook and create a new
folder named File Predefined Streams.
When you start any program in Python, there are actually three predefined streams that don't need any
preparation.
What's more, they are not associated with any files.
You do need to call the open function to get these and they are ready made for you.
If you want to use them, you need to input the sys module using the input sys command.

The names of the three streams are sys.stdin, sys.stdout, sys.sterr.
We'll start with sys.stdin, which means standard input.
It's a special kind of stream that by default reads user input from the keyboard, not from a file.
The input function that you've used many times reads data from this stream by default.
Although this stream is rarely used directly, we can theoretically use it to read input directly from
the console.

So inside Jupyter Lab, inside the directory that we created.
First of all, let's create a new text file and we'll rename it to stdin.py.
And let's also create a new console.
And to put it underneath, like here and now inside the file, we are going to type the following:

import sys
for line in sys.stdin:
	if line.rstrip() == 'q':
		break
	print(line)

print('you pressed q, so i want to quit now. bye!')

And now in the terminal window, we need to navigate to the folder.
And now once I'm inside the folder, I will be able to execute the file.
But first of all, let's analyze what happened here.
So this specific code will read whatever you put in the console line by line and print it to the output.
And if you type Q, we will exit the loop and quit the program.
But before that we will print a short message.

So by default you will also get a new line character at the end of each line that you enter.
So we also use the rstrip function here or actually the estrip method to get rid of the new line character
so we can check if the line equals the Q character.

Now to see how the program works, we are going to execute it like Python stdin.py
And now the program waits for us to input something.
So let's say hello and you can see hello printed to the output.
We may want to put something else here, like how are you?
And you can see the very same message in the output.
But now if you press Q, the program terminates.

The second predefined stream is sys.stdout and it stands for standard output 
by default, the print function outwards the data to the STD out stream so it can be shown to the console for you 
instead of using print You could, theoretically speaking, work on the standard output directly, but it's not really convenient.

Anyways, I'll show you a very simple example.
So let's copy paste this file.
And let's name it stdout.py instead.
Now let's open the file.
And here we are going to keep the import of the sysmodule 

import sys
sys.stdout.write('hello') # works like print('hello')

But this one takes more time to write.
And it's actually less useful because you can't provide the SEP or end arguments and you can't provide
more than one argument at all.
If you want to print an integer to the output using this technique, you would have to turn it into
a string first.
So you would have to do something like this.

import sys
sys.stdout.write('hello')
sys.stdout.write(str(3))
o: hello3

So if you want a string like here, you need to do str string.
And now if we save the file and open it again, you can see three to the output again.

You can see that there is no new line character between the characters and so on.
So in general it's not recommended to print to the console this way, but you should be aware that this
stream at least exists.
Finally, the third predefined stream is stderr, which stands for Standard Error.
Standard error is very similar to standard output.
It also outputs strings to the console.
There is just a semantic distinction.

Useful results produced by our programs should be directed to the standard output, while error messages
should be directed to the standard error.

