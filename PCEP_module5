Functions and exceptions
-----------------------
def greet():
    print('Hello, my dear')
greet()
Output: Hello, my dear

input_numbers = [5.0, 6.3, 5.1, 9.9, 10.0]
sum = 0
for number in input_numbers:
    sum += number
average = sum / len(input_numbers)
print(average)
output: 7.26

def get_average(input_numbers):   # parameter given to the function
    sum = 0.0
    for number in input_numbers:
        sum += number
    average = sum / len(input_numbers)
    print(average)
get_average([5.0, 3.5, 7.8, 9.9, 10.0])    # the list passed to the function is called an argument (it can be also a tuple)
output: 7.24
# if you call the function with empty brackets you will get err 'missing argument' and also if you pass an integer, will give err 'object not iterable'

def print_letter_count(text, letter):
    counter = 0
    for char in text:
        if char == letter:
            counter += 1
    print('Number of', letter, 'is', counter)
print_letter_count('Welcome', 'e')  # the order of the arguments is important
# print_letter_count(text='Welcome', letter='e')
output: Number of e is 2
# in the case of print function, end argument has the default value of a new line character
# and the sep argument has the default value of a whitespace character

def print_letter_count(text, letter='a'): # provide default values to the function
    counter = 0
    for char in text:
        if char == letter:
            counter += 1
    print('Number of', letter, 'is', counter)
print_letter_count('how many letters a are here?')
output: Number of a is 3

def print_letter_count(text='this is the default string to use', letter='a'): # provide default values to the function
    counter = 0
    for char in text:
        if char == letter:
            counter += 1
    print('Number of', letter, 'is', counter)
print_letter_count()
output: Number of a is 2

print_letter_count(letter='a', 'search here') # err positional argument follows keyword argument
# positional arguments must appear first and only then can named arguments appear

#scope of a name is the part of the code where the name is properly recognizable and can be used
def show_truth():
    misterious_var = 'surprize!'
    print(misterious_var)
show_truth()
output: surprize!
# we can define the variable outside of the function also because variables that exist outside the function at the time of the call have a scope inside the function's body

def show_truth():
    misterious_var = 'New Surprise!'
    print(misterious_var)
misterious_var = 'Surprise!'
print(misterious_var)
show_truth()
print(misterious_var)
output: Surprise!
         New Surprise!    
           Surprise!
>>>>>> shadowing - when we call a function like here and we try to modify it, we can see that there is already a var outside the function
# a 2nd temporary var with the same name is created
# first var is local and the 2nd with the same name is global ; they are 2 diff var with 2 diff values 
# the local var inside the function shadows the global var
# if you define within function the variable as: global mysterious_var, the modification will affect it
# if we use lists or dictionaries, keep in mind that if we use functions like append, shadowing will not work (not the same case is in using tuples which immutable)

NONE VALUE
print_return = print('hello world')
print(print_return)
output: hello world
none   >>> this describes a null value or no value (special value, not zero/false/emptystring)

x = None # value returned implicitly by functions that do not return anything meaningful
if x is None:
    print('yes')
if x == None:
    print('it does')
output: yes / it does

RETURN
def get_average(input_numbers):  
    sum = 0.0
    for number in input_numbers:
        sum += number
    average = sum / len(input_numbers)
    return average # nothing is printed, returned value is ignored and we can use a print function
print('the average is:', get_average([5.0, 7.4, 1.4, 4.9, 9.1])) # prints 5.01

def get_average(input_numbers):  
    sum = 0.0
    for number in input_numbers:
        sum += number
    average = sum / len(input_numbers)
    return average # nothing is printed, returned value is ignored and we can use a print function
average = get_average([5.0, 7.4, 1.4, 4.9, 9.1])
if average > 5.0:
    print('the average is too high') # output: the average is too high
# note: all instructions after return statement is ignored

def is_first_last_equal(number_list):  # check if first and last elements from list are equal
    if len(number_list) == 0:
        return
    if (number_list[0] == number_list[-1]):
        return True
    else:
        return False
print(is_first_last_equal(10, 20, 30, 40))  # True ; if we give no elements, will will err with list index out of range message
print(is_first_last_equal([])) # prints None

Exercise functions
+++++++++++++++++++++++++++++++++++++++++++++
Write a function named unique. The function should accept one parameter, which is a list with any number of elements inside. The default value for the parameter should be an empty list ([]).
The function should return a new list with all duplicate elements removed. The function should preserve the original order of elements.
Example 1: for unique([1, 1, 4, 5, 1]), the output should be [1, 4, 5]
Example 2: for unique(['Mark', 'Mark', 'John', 'Anne']), the output should be  ['Mark', 'John', 'Anne']
Solution:
def unique(input_list=[]):
  to_return = []
  for el in input_list:
    if el not in to_return:
      to_return.append(el)
  return to_return
++++++++++++++++++++++++++++++++++++++++++++++++

RECURSION
- function calls itself
- ex. factorial

def get_factorial(number):
    factorial = 1
    for x in range(1, number + 1):
        factorial *= x
    return factorial
print(get_factorial(5)) 
output: 120

def get_factorial_recursive(number):
    return number * get_factorial_recursive(number - 1) # err message maximum recursion depth exceeded

def get_factorial_recursive(number):
    if number <= 1:
        return 1
    return number * get_factorial_recursive(number - 1)
ex. get_factorial_recursive(6)
6 * get_factorial_recursive(5) -> 5 * get_factorial_recursive(4) ... 2 * get_factorial_recursive(1) -> 1 (720)

GENERATORS
- used to return a lot of values one by one

def get_number():
    for i in range(1, 4):
        yield i
print(get_number()) # <generator object get_number at 0x2bb6760>

generator = get_number() # generate numbers one by one using the next function and generator variable which remembers which value was generated previously
print(next(generator)) # print 1
print(next(generator)) # print 2
print(next(generator)) # print 3
print(next(generator)) # err stopiteration

for x in get_number():
    print(x)
output: prints 1 2 3

numbers = list(get_number())
print(numbers)
output: [1, 2, 3]
