MODULES
decomposition = breaking code into smaller pieces
- besides separating into more files, we need to inform python that separate files should cooperate and form a bigger codebase
- a module is simply a file that contains python definitions and statements
Such a file can be imported into a second file, and once you import the module, you can use all the
definitions and statements from that module in that second file.
- You can create your own modules and you can also use modules created by other Python enthusiasts like you, 
- most importantly, you can use a lot of modules that are delivered together with Python.
- These modules form the so called Python Standards Library and you can go to Python documentation online
to see what the library contains.
I've got the link here. docs.python.org/3/library/index.html#the-python-standard-library

Let's take an example of a module called sys.
As you can see, it has system specific parameters and functions.
If you enter the module description page, you can find all the module entities like AB flags, adduaditbhook etc.
The entities are all the definitions, like variables and methods that you can use when you decide to use this module in your code.

Among other things, there is sys.exit. in practice, this function closes your program by raising an exception.

IMPORT MODULE
import sys, math
for name in dir(sys):
    print(name, end='\t')
# The dir() function returns all properties and methods of the specified object, without the values.
# in our case, this function allows us to see all the entities that this module makes available

import sys
sys.exit() # exception occurs of type SystemExit
# we use the name of the module before calling the function in order to not be mistaken by another function with the same name

# if we want to specify the exact entities from the module we are interested in
# we no longer need to specify the module before the function using this syntax
from sys import exit
exit()

from sys import exit
def exit():
    print('i wanna exit')
exit() # this function will be called instead of the imported one as it is overwritten by the one we defined with same name

1. import sys
2. from sys import * 
# this is not recommended as many functions will be replaced and conflicts will appear
# both statements input all the entities from CIS module
# using first option you need to remember about sys prefix/namespace, to add sys.x
# using the 2nd option we do not need to specify the namespace but we can get a lot of conflicts

# we can use aliases when importing
import sys as s
s.exit()

from sys import exit as bye
bye()

MATH MODULE
The moth module is among the most frequently used ones in Python.
It contains a lot of mathematical symbols and functions that you may want to use in your Python programs.
First, we'll import math.

import math

For the PCP examination, though, you need to know just six functions from these.
We can start with three similar functions used to round numbers.
These are ceil(), floor() and trunk().
What's the difference between them?

Let's analyze a simple example.
So we'll do print math.ceil(3.6), math.floor(3.6), math.trunc(3.6)
And when we run the program, it will output 4 3 3.
What's the difference between the three when it comes to ceil? it always rounds the number upwards
to the nearest integer, never less than the number itself. (3.1 -> 4 ; -5.6 -> -5)

Floor function does the opposite. It rounds the number downwards to the nearest integer. (3.1 -> 3 ; -5.6 -> -6)
Returns three because three is not less than 3.0.

trunk() is the easiest function of the three.
This function is simply removes the decimal part and returns the integer from the number.
And you can see that in each case we simply get the number before the decimal part. (3.1 -> 3 ; -5.6 -> -5)

You can use the round function, but it's not required for the examination.
You also need to know the factorial function.
What is a factorial in maths?
It is the multiplication of all positive integers less than or equal to the given number.
The factorial for three is three times two times one, which is six.

print(math.factorial(6)) # output 120

The next function that you need to know is sqrt(), which stands for the square root.
As the name suggests, the function simply returns the square root of a given number.
So, for example, print math asked of 16 would give us 4.0 because four times four is 16.
Note that even though we provide an integer, we get a float in the result.

print(math.sqrt(16)) # output 4.0

Finally, you need to know the hypot() function.
This one has to do with geometry and triangles to be precise.
If you have a right angle triangle and you know the length of the two shortest sites, you can use the
hypot() function to find the longest side, which is also called the hypotenuse.
print(math.hypot(3, 4)) # output 5.0

RANDOM FUNCTION
Another frequently used module in Python is called random. It provides random values.
Computers can't use imagination to think of a random number.
They can only follow an algorithm with some clear predefined steps, and it's difficult to come up with
something random when the steps you take are always predefined.
The algorithms will typically start with a seed. The seed can be treated as a starting value from which Python 
does some fancy computations to output pseudo random numbers.
If you use the same seed, you will typically always get the same pseudo random numbers.
Python can output more than one number based on the same seed.

For example, you could start with a seed of one and then get a pseudo random number of five when you
first ask for a random number.
The second time you ask for a random number, you could get, let's say, three.
The third time it could be something like 11 and so on.
The numbers may seem perfectly random, but if you close your program and start it again, you will get the same numbers.
Not really random anymore, right?
That's why ideally the seed should also change over time.
This way you will get different random numbers if you run your program again later on.
And how do you ensure that the seed changes over time?
The easiest way is to use time.

Python can take the current time and change it into a number that will become the seed for pseudo random
number generation.
And because the current time is always different, the seed will also be different.
As a result, you will get different random numbers.

The most general function in this module is also called random.
It produces a float number between zero and one.
Let's call this function three times in a row and see what we get.

import random
print(random.random())
print(random.random())
print(random.random())
output: 0.27 0.73 0.30

You can see that we got three different numbers.
If we rerun the cells, you can see that the numbers change. 0.47 0.65 0.98
That's because by default, Python changes the seat for you, usually based on the local time stamp on your machine.
If for any reason you want to set the seed yourself, you can use the seat function.

import random
print(random.seed(0)) # set the seat to zero.
print(random.random())
print(random.random())
print(random.random())
output: 0.84 0.75 0.42

Now, you can see that the pseudo random values don't change.
They are all based on the same seed of zero.
So the series of numbers will receive is always the same.

Two more functions that you need to know for the Pcap exam are choice() and sample().
They are a bit similar because both of them take a sequence as an input.
A sequence could be a list, a string, and the output randomly selected items from the sequence.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
names = ['Alan','Kate','Mary','Kate','Jo','John']
print(random.choice(numbers))
print(random.choice(names))

And now we have, as you can see, two sample lists, one with integers and one with strings.
The choice function works with both of them.
It accepts a sequence as the input and outputs a random element from this sequence.
Naturally, we can use sequences other than lists.
These could be strings or something else.
So for example, you can pick a random character from a string using random.choice().

And now I have something like this prepared to get a long string.
Can you feel the power of Python and you get a random letter and each time you run the cell you get
something different.

random.choice('CanYoufeelThePowerOfPython')

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
for i in range(10):
    print(random.choice(numbers))
output: 10 4 9 3 5 3 2 10

You can see that the choice function doesn't care about duplicates.
It returns one random element at a time.
But that element can be any element, also an element that was already returned in one of the previous invocations.

Imagine that you have a list of participants in a contest and you want to generate a random order for
their appearance on stage.
In this case, you can't get the same person twice.
You need to ensure that the order is random, but that each participant is only shown once.

That's why you can use the sample() function.
This function takes to arguments, a sequence and the number of elements that should be randomly taken
from the sequence without duplicates.

names = ['Alan','Kate','Mary','Kate','Jo','John']
random.sample(names, 3)

This code picks three random names from the list and returns them as a new list.
Note that the names will always be unique (when referring to the index, not the value).
Naturally, the second argument might not be greater than the number of elements in the sequence.

PLATFORM MODULE
- it has access to underlying platform identifying data and can give you data about python version, OS, HW 
(it shows the layers between your code and the hw your computer is using)

The documentation describes it as access to underlying platforms identifying data.

In other words, the platform module can tell you a little bit about your Python version, the operating
system, and the hardware you're using.
Take a look at the diagram. It shows the layers between your code and the hardware that your computer is using.
Your code is located at the very top one level below.
There's the running environment of Python.
The next layer is the operating system or OS for short.
Python uses a lot of helpers from the operating system for things such as processing files or communicating
with physical devices.
At the very bottom, there's the hardware, the processor, the RAM, memory network interfaces, user
keyboard and mice and others.
All of the four layers cooperate so we can write Python programs.
For example, when you want to get some user data, your code can invoke the input function.
The Python environment accepts the order and adapted to meet the requirements of the local operating system.
The OS checks if the request from Python is valid and it uses the hardware in this case the keyboard
to complete your request.
The platform module allows us to access some basic information about the underlying layers the Python
environment, the operating system and the hardware.

Let's look at the functions that you need to know for the examination.
First of all, we'll import the module and now we'll start with platform.

import platform
print(platform.platform())
output: Windows-10-10.0.17763-SP0

This function returns a string that identifies the underlying platform.
The input is intended to be human readable.
As you can see here, the platform that I'm using is Windows ten with this specific version.
The function actually takes two parameters that have some default values. That's why I didn't have to provide any arguments.

When alias is set to true or any non-zero valu, the function may present alternative underlying names.
This parameter will not do anything on certain platforms while on others it can show system names that
differ from common names when terse is set to true in turn or any non-zero value, the function will try 
to present a briefer form if any such form is available.

platform.platform(aliased = False, terse = False)

So for instance, if I set both of these to true, you can see a brief form Windows ten.

import platform
print(platform.platform(True, True))
output: Windows-10

The next function is called machine.

import platform
print(platform.machine())
output: AMD64

It returns the generic name of the processor which runs your OS.
A similar function is called processor. It returns the real name of the processor.
For some processors, it will print the exact same information as machine. But as you can see in my case, the info is different.

import platform
print(platform.processor())
AMD64 Family 23 Model 49 Stepping 0, AuthenticAMD

Next there is a function named system.
And this function returns the generic operating system name. In my case it is Windows.

import platform
print(platform.system())
output: Windows

And then there are two more functions that you need to know.
These functions relate to the Python implementation itself.
Python implementation returns the name of your Python implementation.

import platform
print(platform.implementation())
output: CPython

C Python is the default and most widely used implementation of the Python language written in the C language.

Python version tuple.
import platform
print(platform.python_version_tuple())
output: ('3', '9', '7')

Unlike all other functions, this function does not return a string. Instead it returns a tuple with three elements.
The first element is the major part of the Python version.
The second one is the minor part, and the last one is the patch.
So in this case, my python version is 3.9.7.

Exercise1
++++++++++++++++++++++++++++++++++++
Let's write a simple function that will help organise lotteries. The function will generate a list of random numbers (to simulate lottery tickets), and it will also choose one number from the generated list (to simulate the winning ticket).
Write a function named generate_tickets that will accept two integer arguments: ticket_count and max_number. The function should return a tuple with exactly two elements:
first element: a list of random unique integer numbers in the range from 0 (inclusive) to max_number (exclusive); the number of elements is provided in the ticket_count argument
second element: one random element from the generated list of numbers
Calling generate_tickets(5, 10) should generate 5 random unique integers in the range from 0 (inclusive) to 10 (exclusive). An example return value for this invocation could be:
([2, 8, 9, 3, 0], 8)
In this case, the random numbers are: 2, 8, 9, 3, 0. The winning number is 8.
Note: You can assume that the arguments of the function are always correct (i.e. you always get two correct integers as the input arguments).
+++++++++++++++++++++++++++++++++
solution:
import random
 
def generate_tickets(ticket_count, max_number):
    list_to_return = random.sample(range(0, max_number), ticket_count)
    return (list_to_return, random.sample(list_to_return, 1)[0])
+++++++++++++++++++++++++++++++++

CREATE YOUR OWN MODULES
---------------------
main.py
------
import module

module.py
---------


PS Microsoft.PowerShell.Core\FileSystem::\\oro-vdiprof-01.luxoft.com\home$\CTudose\Downloads\python\__pycache__> ls
    Directory:
    \\oro-vdiprof-01.luxoft.com\home$\CTudose\Downloads\python\__pycache__
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----         3/2/2024  12:34 PM            165 module.cpython-312.pyc
>>>>>>> the content of this file is semicomplied code for the module and thanks to this process, the code
is ready to be executed by python and a lot of checks required for pure source files can be skipped here

PS Microsoft.PowerShell.Core\FileSystem::\\oro-vdiprof-01.luxoft.com\home$\CTudose\Downloads\python\__pycache__> & C:/Users/CTudose/AppData/Local/Programs/Python/Python312/python.exe -V
Python 3.12.2

main.py
------
import module

module.py
---------
print('I am a module')

PS Microsoft.PowerShell.Core\FileSystem::\\oro-vdiprof-01.luxoft.com\home$\CTudose\Downloads\python> & C:/Users/CTudose/AppData/Local/Programs/Python/Python312/python.exe //oro-vdiprof-01.luxoft.com/home$/CTudose/Downloads/python/module.py
I am a module

You can see that the print invocation from the module has been executed, even though the main file
only includes it as an import.
When a module is imported, its content is executed by Python.
Automatically, Python reads whatever is inside the module line by line.
If there are any print invocations, Python will execute them.
If there are any variables or functions, Python will simply invoke them.
Or if they are just definitions, Python will remember them so that you can invoke them in your code.
This gives the module a chance to initialize some of its internal aspects.

In practice, modules typically don't use functions like print to show anything to the output.
If you import the math module, it's because you want to use some of the mathematical functions and
variables in your applications, not because you want the module to print something to the output.
Having a module print something usually means that you have no control over it.
Once you import the module, the content is automatically executed.
That's why most modules only contain function and variable definitions.
This way, if you import the module, nothing will be shown to the output.
But because Python will run through the code of the module, you will have access to all the functions
and variables defined there.

And one more important rule - each module is only initialized once.
Even if you have a lot of files within your application and too many of them call a given module or
they call themselves, Python will remember all the modules that have already been initialized.

Take a look at the diagram.
In this example, there is ModuleTwo that prints hello to the output.
That module is imported into module1 and then both modules are imported into main.py.
How many times will you see 'Hello' printed to the output if you run main?
Theoretically speaking, python should first show hello when you import module one because module1
imports module2 and then python should show 'hello' for the second time when you import module2 directly.

But fortunately Python remembers the modules that are imported, which means you will see 'Hello' printed 
to the output only once.
Each module has a special name created for us by Python - name.
__name__ == name1 __name__ == name2
Note that before and after the word name there are double underscores.
Python sets the value of this variable for us and the value depends on how the file is run.
When the given file is run directly, the name variable is set to main when a given file is imported as a module.
Instead, the name variable is set to the modules name that is set to the file's name without the PY extension.

Let's see that in practice we'll write the following code in the module.
own_module.py
if __name__ == '__main__':
    print('file executed directly')
else:
    print('file is executed as a module')

main.py
import own_module

If name equals main, then print file executed directly else.
Save the file note we check the content of the variable named name and if it's main it means we are
executing the file directly.
If it's anything else, it means the files executed as a module.

So now if we try to run python main.py, you will see file executed as a module.
But if we change the invocation in the terminal window and we'll do python own_module.py you can
see file executed directory.
That's because this time we don't use own_module as a module imported in the main file.
We use it directly and independently.
In practice, many modules use the name variable to decide whether to run tests or not.
Good modules don't only contain useful functions, they also contain some automated tests to verify
whether the functions work correctly.

Naturally, we don't want to run these tests when the module is imported in another file.
However, when the module is executed independently, then the tests are activated.
Now let's talk about public and private variables.
In many programming languages, you can specify whether a given variable is public or private.
If it's public, then everybody can use it.
If it's private, then usually only the creator of the variable can use it instead.
This can be useful when the creator of a module has some internal variables that are necessary for the
proper functioning of the module.
But those variables may be very sensitive and the users of the module should never touch them.
The bad news is that Python has no mechanism to hide variables from the users of a module.
There is, however, a convention that most people follow - if you start a variable name with one or two underscores.

Like this - _my_private_ 
It means that the users of a module should never modify the variable.
Keep in mind, however, that this is just a convention.
The users can technically do whatever they want with the variable, the underscore simply inform them
that it's a bad idea.

PRACTICAL EXAMPLE OWNMODULE
-------------------------------
lists_utils.py
------------------------------------
#!/usr/bin/env python3
""" list_utils.py is a sample python module that exposes list utility functions

__usage_counter = 0

def sum_elements(user_list):
    global __usage_counter
    __usage_counter +=1
    element_sum =0
    for el in user_list
        element_sum += el
    return element_sum

def double_each_element(user_list):
    global __usage_counter
    __usage_counter += 1
    return [element * 2 for element in user_list]

def get_usage_counter():
    global __usage_counter
    return __usage_counter

if __name__ == '__main__':
    print('module executed independently, running tests...')
    entry_list = [1, 2, 3, 4, 5]
    summed = sum_elements(entry_list)
    if summed == 15:
        print(sum list ok)
    else:
        print('sum list failed')
doubled = double_each_element(entry_list)
if doubled == [2, 4, 6, 8, 10]
------------------------------------

The line at the top of the file is called a shebang.
It also has other names shebang, pound bang or hash coupling.
However, in systems based on Unix, such as Mac, OS or Linux, this line instructs the operating system
that it needs to use Python three to interpret the file.
In many operating systems, this line is not required at all.
However, there are some systems where this line is necessary for the module to work correctly, and
because modules are typically written for broad audiences and we want them to be as universal as possible,
it's a good idea to put this line at the top of your file.

The next line is a special kind of string.
In triple quotes, it may be a single line or multi line when placed somewhere near the top of a module.
We call it a docstring.
In other words, this is a brief description of what the file is.
Many Python tools identify such dog strings automatically, so it's a good idea to put one in your module.

Then we have a variable, starting with a double underscore.
This convention means that the user should not modify the variable.
Again, this is only a convention and the user is actually able to modify it.
In our case, the variable is a counter that counts.
How many times we have used one of the functions available in this module.

Then we have three functions that are available for import.
Some elements double each element and get usage counter.
You are welcome to use these functions as many times as you need in your file when you import the module.
And then at the very end we have some tests that verify.

If the functions are correct, the test will only be invoked when we run the file independently.
To do that, we use the underscore name, underscore variable and check if its value is main.
If you input the file as a module, they will not be executed.
Okay, let's see how the module works in practice.
First, we'll run it independently.

# python lists_utils.py
output: Module executed independently, running tests... 
Sum list OK
Doubled list OK
Usage counter OK

You can see that the tests were executed after the file was executed independently.
And now let's see how we can import the file as a module.
We'll create a new file and this folder named main_lists.py

main_lists.py
---------------
import lists_utils
my_list == [23, 21, 2, 5, 72]
print(list_utils.sum_elements(my_list))

# python main_lists.py
output: 

Python detected that the file is imported as a module and so the tests were simply skipped.
We want to print the list after we do lists.
We created a random list and want to use sum_elements function
the function should return the total amount after adding all the elements in the list.
To check that, we'll save the file and rerun it now.

# python main_lists.py
output: 123

And you can see the sum of all elements in the list.

+++++++++++++++++++++++++++++++++++++++
EXERCISE2 - Creating own modules
Let's create a simple program that uses some modularity. You are given three files:
1. string_utils.py (note singular "string")
2. strings_utils.py (note plural "strings")
3. main_program.py
Your task is to fill all three files with some code according to the requirements:
1. string_utils.py: this file should contain a function named halve_string that accepts a single argument: input_string. Given a string, the function should return a tuple with two string elements: the first element should contain the first half of the string, the second element should contain the second half of the string. For strings with an odd count of characters, the first element should also contain the middle character.
Example 1: halve_string('Mark') should return ('Ma', 'rk')
Example 2: halve_string('Lydia') should return ('Lyd', 'ia')
2. strings_utils.py: this file should import string_utils as a module and then use the function from point (1) to create its own function named halve_strings that accepts a single argument: a list of strings string_list. Given a list of strings, the function should return a list of tuples with halved strings, just like we explained in point (1).
Example: halve_strings(['Mark', 'Lydia']) should return [('Ma', 'rk'), ('Lyd', 'ia')]
3. main_program.py: this file should import strings_utils as a module, use the function from point (2) on the list provided in the editor (quotes), and print the return value of the function. 
+++++++++++++++++++++++++++++++++++++++
string_utils.py
-----------------
import math
def halve_string(input_string):
    middle = math.ceil(len(input_string)/2)
    return (input_string[:middle], input_string[middle:])

strings_utils.py
-------------------
import string_utils
def halve_strings(string_list):
    to_return = []
    for string in string_list:
        to_return.append(string_utils.halve_string(string))
    return to_return

main_program.py
----------------------
import strings_utils
quotes = ['Being happy never goes out of style.',
'Life is either a great adventure or nothing.',
'All you need in this life is ignorance and confidence; then success is sure.',
'All your life, you will be faced with a choice. You can choose love or hate... I choose love.',
'The time is always right to do what is right.']
print(strings_utils.halve_strings(quotes))
+++++++++++++++++++++++++++++++++++++++++++++++++++++

Module locations - sys.path
------------------------------
So far we could see two types of modules imported into our Python files.
Modules from the standard Python library and our own custom modules.
In both cases, we only had to write a single line such as import, followed by the name of the module.
Without the file extension, we did not need to specify where Python could actually find the module.
We know that the custom modules created by ourselves could be found in the same directory as the main file.

But how about the standard library?
How did Python know where to look for the random module, for example?
In fact, there's a special variable in Python which stores a list with all the directories that Python
should check in order to find a module that we request with the import keyword.
We can check that variable by importing the sys module and accessing the path variable.
Take a look here.
I have a new file opened up in Jupyter Lab called modules-path.py and I'll do the following.

modules-path.py
---------------
import sys
print(sys.path)

In the terminal window. Navigate to the specific folder and now run python modules.
# python modules-path.py
& C:/Users/CTudose/AppData/Local/Programs/Python/Python312/python.exe //oro-vdiprof-01.luxoft.com/home$/CTudose/Downloads/python/module.py
['\\\\oro-vdiprof-01.luxoft.com\\home$\\CTudose\\Downloads\\python', 'C:\\Users\\CTudose\\AppData\\Local\\Programs\\Python\\Python312\\python312.zip', 
'C:\\Users\\CTudose\\AppData\\Local\\Programs\\Python\\Python312\\DLLs', 'C:\\Users\\CTudose\\AppData\\Local\\Programs\\Python\\Python312\\Lib', 
'C:\\Users\\CTudose\\AppData\\Local\\Programs\\Python\\Python312', '\\\\oro-vdiprof-01.luxoft.com\\home$\\CTudose\\AppData\\Roaming\\Python\\Python312\\site-packages', 
'C:\\Users\\CTudose\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages']

Python prints a list of all locations that it checks for.
There are a lot of places, as you can see in this specific list, the locations are checked in the
same order as they appear in the list.
As soon as Python finds a given module, it imports it and doesn't check the rest of the list.
This means that if you have two versions of the same module in two different locations from the list,
Python will simply take the first one that it finds and will ignore the other one completely.

If Python can't find the module in any of the specified locations.
The input fails and we can see an error in the output.
Interestingly, we can add new locations to the path variable.
You could use that functionality if you wanted to place your modules into a non-standard folder and
still ask Python to look for the modules there.

So let's create a new folder here named Secret that will navigate to the folder and inside it will create
an empty file named secret_module.py.
By now we would like to import this module in the folder above here.

modules-path.py
---------------
import secret_module

So now in this file we'll go into simply to import secret module, save the file and try to run it now
and you can see an error - ModuleNotFoundError: No module named 'secret-module'
That's because the folder secret is not part of the path list.
First above we'll do import cis and then cis path append secret and only, then import secret module.

modules-path.py
---------------
import sys
sys.path.append('secret')
import secret_module

it works fine because path is a standard python list.
We can use standard python methods on the list such as append or insert.
Append adds an element at the end of the list.
You can also use insert to add the new element at any place in the list that you want.

And once we add secret as a location to check, you can see that everything works fine.
Note that we first need to import the CIS module and modify the path variable, and only then can we
import the secret module.
If you try to write import cis comma secret module on line one, you will get an error because on this
line the secret folder is not added to the path variable yet.
Additionally, you can add both relative and absolute paths and absolute path is the full address of
the folder, starting from the hard drive label.

address = 'C:\\Users\\user\\..'

A relative path in turn is a path relative to the current folder with the main file.
In this case, the secret folder is just inside the same directory.
So we just need to specify the directory name like here and this becomes a relative path.
Note that we use double slashes here.
That's because a slash itself is a special character in Python, so you need to escape it with an additional
slash if you want to use it.
Lastly, if you want to have a relative path that goes up in the folder hierarchy, keep in mind that
the command go one folder up in Python is represented by two dots.

So for example, if you're now here in modules on module and you would like to import something from
the one folder which is one level above, you would have to have an address for one.

address = '..\\secret'

So this would go one level up and then look for a folder named Secret.

PACKAGES
---------------
If you only have a few modules, then keeping them in a single location within a single folder is not
a bad idea.
However, you may quickly run into problems when you have tens or even hundreds of modules.
Keeping them in a single folder will quickly lead to chaos.
That's why the authors of Python came up with a simple concept of packages.
A package is a container or a box for similar modules.
This way you can easily organize modules into categories.

For Creating packages in Python you just need to create a folder on your hard drive and name it.
You can also have multiple folders at the same level, or you can have folders inside folders.
Python will automatically treat them as support packages in packages.

In our project, let's create a directory structure with some modules inside the names of the directories
and the names of the modules will be completely fictional and we won't write any actual module code.
All we want to do is show you how you can structure your modules and how to use the concept of packages.

project_modules
    communication
        com.py
    core
        util.py
        additional
            security.py
    messaging
        event.py
        queue.py

We already have some directories in place and this is what Python treats as packages, as simple as that.
this directory structure works as package structure for our Python project and now

we can go to the top level and here create a new file named main packages dot py now in this file.

Let's have a terminal window here for later.

And now in this file, we will want to import some of the projects from the packages now because we

actually want to use something from the packages.

Let's open up project modules, communication comm py.

And here we will just write a very simple function like fun

that will only print something to the output.

Don't forget to save the file.

And now let's go back to our main packages file.

And here we want to use the function from the command py module.

So this function is located in the PY module, which is located in the package project modules and then

in the sub package communication.

So in order to import that, we need to use the following import project modules.

So the top package here followed by a dot, then communication.

And then.

Com which is the name of the module itself.

This instructs python to look into the project modules package, then into the communication sub package

and then to import the comm module.

Now to use the function we have just defined, we need to provide the full package path again.

So I'll just copy paste it here.

And to my fun, which is the name of the function that we defined here in this module and now in this

folder.

Where the main packages file is located.

We want to do python space main packages dot by oops.

I'm actually not in the right folder.

I need to go into modules code module and execute python main packages dot py again.

You can see a in the output, which is exactly the function defined here.

Now, if you don't want to write such a long name for the function with all the packages and the module

name, you can use a different kind of input from project modules.

Communication dot com.

Import my fun.

Without the brackets.

And now you can invoke the function like this.

Let's run it again.

Wax as well.

One important thing you need to remember is that you must always provide specific modules in the import

statements.

You could be tempted to write something like this.

Let me comment this out for a second.

Import projects.

Project modules.

And you could hope that this will automatically import all the modules that can be found starting in

this folder.

Unfortunately, Python doesn't work like this.

You can technically import the package itself like this without specifying any modules, but this has

no practical usage.

The modules will not be imported.

Let's make an experiment.

As you can see.

Attribute Error.

Module project modules has no attribute communication.

So you can see that this statement actually instructs Python to import that package itself, not the

modules inside the package.

All right.

Let's go back to the previous version now.

Save the file.

Run it again.

Also without the slash.

And that works like a charm.

Finally, let's talk about a file named in it, Dot Pi.

It's a very special kind of file that you can add in a package directory when you create a package.

So you could do something like this

in it.

Dot by and here.

You could write some statements.

This file can be used to initialize the package if this is necessary.

This file is executed by Python.

When any of the packages modules is or are imported, the file can also be empty and then Python will

simply ignore it.

In recent versions of Python, the init py file has become optional.

Previously it had to be present for every package without the file.

Python did not treat a given folder as a package.

That's why in some older courses staging python you will see a statement that the init py file must

be present in the package directory or else python will not treat a given directory as a package.

However, this is no longer true.

Starting from Python 3.3, you don't need this file to create a package.

All you need is to create a directory in your operating system and Python will automatically treat that

as a package.

But you can of course still use any pile files if you need some sort of initialization for your modules.

All right.

And that's actually it.

As you can see, it's actually pretty simple to use packages in Python.

You just need to create directories.

This finishes up the series about modules and packages.

In this course we will no longer need Jupyter Lab for now so you can save it and return to Jupyter Notebook
