MODULES
decomposition = breaking code into smaller pieces
- besides separating into more files, we need to inform python that separate files should cooperate and form a bigger codebase
- a module is simply a file that contains python definitions and statements
Such a file can be imported into a second file, and once you import the module, you can use all the
definitions and statements from that module in that second file.
- You can create your own modules and you can also use modules created by other Python enthusiasts like you, 
- most importantly, you can use a lot of modules that are delivered together with Python.
- These modules form the so called Python Standards Library and you can go to Python documentation online
to see what the library contains.
I've got the link here. docs.python.org/3/library/index.html#the-python-standard-library

Let's take an example of a module called sys.
As you can see, it has system specific parameters and functions.
If you enter the module description page, you can find all the module entities like AB flags, adduaditbhook etc.
The entities are all the definitions, like variables and methods that you can use when you decide to use this module in your code.

Among other things, there is sys.exit. in practice, this function closes your program by raising an exception.

IMPORT MODULE
import sys, math
for name in dir(sys):
    print(name, end='\t')
# The dir() function returns all properties and methods of the specified object, without the values.
# in our case, this function allows us to see all the entities that this module makes available

import sys
sys.exit() # exception occurs of type SystemExit
# we use the name of the module before calling the function in order to not be mistaken by another function with the same name

# if we want to specify the exact entities from the module we are interested in
# we no longer need to specify the module before the function using this syntax
from sys import exit
exit()

from sys import exit
def exit():
    print('i wanna exit')
exit() # this function will be called instead of the imported one as it is overwritten by the one we defined with same name
