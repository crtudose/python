MODULES
decomposition = breaking code into smaller pieces
- besides separating into more files, we need to inform python that separate files should cooperate and form a bigger codebase
- a module is simply a file that contains python definitions and statements
Such a file can be imported into a second file, and once you import the module, you can use all the
definitions and statements from that module in that second file.
- You can create your own modules and you can also use modules created by other Python enthusiasts like you, 
- most importantly, you can use a lot of modules that are delivered together with Python.
- These modules form the so called Python Standards Library and you can go to Python documentation online
to see what the library contains.
I've got the link here. docs.python.org/3/library/index.html#the-python-standard-library

Let's take an example of a module called sys.
As you can see, it has system specific parameters and functions.
If you enter the module description page, you can find all the module entities like AB flags, adduaditbhook etc.
The entities are all the definitions, like variables and methods that you can use when you decide to use this module in your code.

Among other things, there is sys.exit. in practice, this function closes your program by raising an exception.

IMPORT MODULE
import sys, math
for name in dir(sys):
    print(name, end='\t')
# The dir() function returns all properties and methods of the specified object, without the values.
# in our case, this function allows us to see all the entities that this module makes available

import sys
sys.exit() # exception occurs of type SystemExit
# we use the name of the module before calling the function in order to not be mistaken by another function with the same name

# if we want to specify the exact entities from the module we are interested in
# we no longer need to specify the module before the function using this syntax
from sys import exit
exit()

from sys import exit
def exit():
    print('i wanna exit')
exit() # this function will be called instead of the imported one as it is overwritten by the one we defined with same name

1. import sys
2. from sys import * 
# this is not recommended as many functions will be replaced and conflicts will appear
# both statements input all the entities from CIS module
# using first option you need to remember about sys prefix/namespace, to add sys.x
# using the 2nd option we do not need to specify the namespace but we can get a lot of conflicts

# we can use aliases when importing
import sys as s
s.exit()

from sys import exit as bye
bye()

MATH MODULE
The moth module is among the most frequently used ones in Python.
It contains a lot of mathematical symbols and functions that you may want to use in your Python programs.
First, we'll import math.

import math

For the PCP examination, though, you need to know just six functions from these.
We can start with three similar functions used to round numbers.
These are ceil(), floor() and trunk().
What's the difference between them?

Let's analyze a simple example.
So we'll do print math.ceil(3.6), math.floor(3.6), math.trunc(3.6)
And when we run the program, it will output 4 3 3.
What's the difference between the three when it comes to ceil? it always rounds the number upwards
to the nearest integer, never less than the number itself. (3.1 -> 4 ; -5.6 -> -5)

Floor function does the opposite. It rounds the number downwards to the nearest integer. (3.1 -> 3 ; -5.6 -> -6)
Returns three because three is not less than 3.0.

trunk() is the easiest function of the three.
This function is simply removes the decimal part and returns the integer from the number.
And you can see that in each case we simply get the number before the decimal part. (3.1 -> 3 ; -5.6 -> -5)

You can use the round function, but it's not required for the examination.
You also need to know the factorial function.
What is a factorial in maths?
It is the multiplication of all positive integers less than or equal to the given number.
The factorial for three is three times two times one, which is six.

print(math.factorial(6)) # output 120

The next function that you need to know is sqrt(), which stands for the square root.
As the name suggests, the function simply returns the square root of a given number.
So, for example, print math asked of 16 would give us 4.0 because four times four is 16.
Note that even though we provide an integer, we get a float in the result.

print(math.sqrt(16)) # output 4.0

Finally, you need to know the hypot() function.
This one has to do with geometry and triangles to be precise.
If you have a right angle triangle and you know the length of the two shortest sites, you can use the
hypot() function to find the longest side, which is also called the hypotenuse.
print(math.hypot(3, 4)) # output 5.0
